{"version":3,"sources":["reportWebVitals.js","controllers/graphql/client.js","controllers/state/s_vaccination.js","controllers/state/s_order.js","controllers/state/store.js","components/home.jsx","components/vaccine.jsx","components/r_orders.jsx","components/status.jsx","controllers/graphql/fragments/f_vaccine.js","controllers/graphql/queries/q_vaccine.js","components/vaccination.jsx","components/r_vaccinations.jsx","controllers/graphql/fragments/f_vaccination.js","controllers/graphql/queries/q_vaccination.js","tools/databuilder.js","components/d_visualise.jsx","components/navigator.jsx","tools/devstring.js","tools/idGen.js","tools/inforeader.js","components/header.jsx","components/footer.jsx","components/frontend.jsx","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","vaccinationSlice","createSlice","name","initialState","data","status","reducers","setVaccinations","state","action","vaccinations","setStatus","actions","orderSlice","setOrders","orders","configureStore","reducer","Home","id","Vaccine","orderNumber","responsiblePerson","healthCareDistrict","vaccine","injections","arrived","embedded","arrivalDate","Date","expirationDate","valueOf","className","style","marginTop","toLocaleString","RenderOrders","useState","sorting","sort","a","b","getSorted","map","Error","props","datatype","Loading","VACCINE_DETAILS","gql","VACCINES","VACCINE","VACCINE_ORDER_COUNT","Vaccination","vaccinationId","gender","sourceBottle","vaccinationDate","useLazyQuery","variables","by","loadVaccineOrder","called","error","loading","vaccinated","toLocaleDateString","onClick","marginLeft","RenderVaccinations","useSelector","vaccination","VACCINATION_DETAILS","VACCINATIONS","VACCINATION_COUNT","databuilder","vData","forEach","order","find","o","push","vaccineOrderId","vaccineArrivalDate","DataVisualisation","compositeData","vaccineDim","genderDim","healthcareDistrictDim","vaccinationCount","useQuery","orderCount","checkOrderStatus","checkVaccinationStatus","label","values","d","Female","percentage","loadVaccinationCountFemale","toFixed","icon","arrowRight","Male","loadVaccinationCountMale","Nonbinary","loadVaccinationCountNonbinary","GenderRate","Antiqua","injectionsPerOrder","brand","loadVaccineOrderCountAntiqua","vaccineOrderCount","Fragment","SolarBuddhica","loadVaccineOrderCountSolarBuddhica","Zerpfy","loadVaccineOrderCountZerpfy","VaccineRate","Rates","display","outline","marginBottom","type","dimensions","line","shape","cmin","cmax","color","Int8Array","autocolorscale","labelfont","size","arrangement","layout","width","window","innerWidth","height","innerHeight","title","Routing","exact","path","children","Navigator","activeStyle","textDecoration","textDecorationColor","inactiveStyle","separator","to","isDev","string","idGen","parentId","idFor","appid","packageinfo","toString","appname","authorinfo","author","repoinfo","repository","vaccineSample","vaccinationSample","Heading","data-testid","inforeader","Header","Footer","href","url","alias","Frontend","dispatch","useDispatch","useEffect","vaccines","baseId","ReactDOM","render","StrictMode","store","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.49236b8c.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ApolloClient, InMemoryCache } from '@apollo/client';\n\nconst client = new ApolloClient({\n  uri: 'https://sda-vaccines.herokuapp.com/api',\n  cache: new InMemoryCache()\n});\n\nexport default client;","import { createSlice } from '@reduxjs/toolkit';\n\nexport const vaccinationSlice = createSlice({\n  name: 'vaccinations',\n  initialState: {\n    data: [],\n    status: 'waiting'\n  },\n  reducers: {\n    setVaccinations: (state, action) => {\n      state.data = action.vaccinations\n    },\n    setStatus: (state, action) => {\n      state.status = action.status\n    }\n  }\n});\n\nexport const { setVaccinations, setStatus } = vaccinationSlice.actions;\n\nexport default vaccinationSlice.reducer;","import { createSlice } from '@reduxjs/toolkit';\n\nexport const orderSlice = createSlice({\n  name: 'orders',\n  initialState: {\n    data: [],\n    status: 'waiting'\n  },\n  reducers: {\n    setOrders: (state, action) => {\n      state.data = action.orders\n    },\n    setStatus: (state, action) => {\n      state.status = action.status\n    }\n  }\n});\n\nexport const { setOrders, setStatus } = orderSlice.actions;\n\nexport default orderSlice.reducer;","import {configureStore} from '@reduxjs/toolkit';\n\nimport vaccinationSlice from './s_vaccination';\nimport orderSlice from './s_order';\n\nexport default configureStore({\n  reducer: {\n    vaccinations: vaccinationSlice,\n    orders: orderSlice\n  }\n});","import React from 'react';\n\nconst Home = ({id}) => {\n  return <section>\n    <p>Home</p>\n  </section>;\n};\n\nexport default Home;","import React from 'react';\n\nimport '../styles/elements.css';\n\nexport const Vaccine = ({\n  id,\n  orderNumber,\n  responsiblePerson,\n  healthCareDistrict,\n  vaccine,\n  injections,\n  arrived,\n  embedded = false\n}) => {\n  const arrivalDate = new Date(arrived);\n  const monthInMilliseconds = 30*24*60*60*1000;\n  const expirationDate = new Date(arrivalDate.valueOf()+monthInMilliseconds);\n  return <details className={embedded ? 'data' : 'data highlight'} >\n    <summary className='element' >{vaccine} - {orderNumber}</summary>\n    <p className='element' style={{marginTop: '0.5rem'}} >Vaccine vial ID: {id}</p>\n    <p className='element' >Vaccine order number: {orderNumber}</p>\n    <p className='element' >Responsible person: {responsiblePerson}</p>\n    <p className='element' >Healthcare district: {healthCareDistrict}</p>\n    <p className='element' >Vaccine: {vaccine}</p>\n    <p className='element' >Injections / vial: {injections}</p>\n    <p className='element' >Date of arrival: {arrivalDate.toLocaleString()}</p>\n    <p className='element' >Date of expiration: {expirationDate.toLocaleString()}</p>\n  </details>;\n};\n\nexport const SimpleVaccine = ({\n  id,\n  orderNumber,\n  responsiblePerson,\n  healthCareDistrict,\n  vaccine,\n  injections,\n  arrived\n}) => {\n  const arrivalDate = new Date(arrived);\n  const monthInMilliseconds = 30*24*60*60*1000;\n  const expirationDate = new Date(arrivalDate.valueOf()+monthInMilliseconds);\n  return <p>simple {id}</p>\n};\n\nexport default Vaccine;\n","import React, { useState } from 'react';\n\nimport {Vaccine} from './vaccine';\n\nconst RenderOrders = ({orders}) => {\n  const [sorting, setSorting] = useState('oNumA');\n  const setSortingOrder = (order) => {\n    switch (order) {\n      case 'orderNumberA': setSorting('oNumA'); break;\n      case 'orderNumberD': setSorting('oNumD'); break;\n      default: setSorting('oNumA');\n    }\n  }\n  const getSorted = () => {\n    const data = orders;\n    switch (sorting) {\n      case 'oNumA': return data;\n      case 'oNumD': return data.sort((a,b) => a.orderNumber < b.orderNumber ? 1 : -1);\n      default: return data;\n    }\n  };\n  return <section id='orders' >\n    {orders\n      ? getSorted().map(vaccine => <Vaccine embedded={false} {...vaccine} />)\n      : <p>Orders</p>}\n  </section>\n};\n\nexport default RenderOrders;","import React from 'react';\n\nexport const Error = (props) => {\n  return <section id={`error-${props.datatype}`} >\n    <p>Error loading {props.datatype}</p>\n  </section>;\n};\n\nexport const Loading = (props) => {\n  return <section id={`loading-${props.datatype}`} >\n    <p>Loading {props.datatype}</p>\n  </section>;\n};","import { gql } from '@apollo/client';\n\nexport const VACCINE_DETAILS = gql`\n  fragment VaccineDetails on Vaccine {\n    id\n    orderNumber\n    healthCareDistrict\n    responsiblePerson\n    vaccine\n    injections\n    arrived\n  }\n`;","import { gql } from '@apollo/client';\nimport {VACCINE_DETAILS} from '../fragments/f_vaccine';\n\nexport const VACCINES = gql`\n  query vaccines($by: String, $responsiblePerson: String, $healthCareDistrict: String, $vaccine: String) {\n    vaccines(by: $by, responsiblePerson: $responsiblePerson, healthCareDistrict: $healthCareDistrict, vaccine: $vaccine) {\n      ...VaccineDetails\n    }\n  }\n  ${VACCINE_DETAILS}\n`;\n\nexport const VACCINE = gql`\n  query vaccine($by: String!, $id: String, $orderNumber: Int) {\n    vaccine(by: $by, id: $id, orderNumber: $orderNumber) {\n      ...VaccineDetails\n    }\n  }\n  ${VACCINE_DETAILS}\n`;\n\nexport const VACCINE_ORDER_COUNT = gql`\n  query vaccineOrderCount($by: String, $brand: String, $healthCareDistrict: String, $responsiblePerson: String, $arrivalDate: String) {\n    vaccineOrderCount(by: $by, brand: $brand, healthCareDistrict: $healthCareDistrict, responsiblePerson: $responsiblePerson, arrivalDate: $arrivalDate)\n  }\n`;\n\nexport const VACCINE_INJECTION_COUNT = gql`\n  query vaccineInjectionCount($by: String, $brand: String, $healthCareDistrict: String, $responsiblePerson: String, $arrivalDate: String) {\n    vaccineInjectionCount(by: $by, brand: $brand, healthCareDistrict: $healthCareDistrict, responsiblePerson: $responsiblePerson, arrivalDate: $arrivalDate)\n  }\n`;\n\nexport const VACCINE_ORDER_EXPIRATION = gql`\n  query orderExpiration($orderNumber: Int!) {\n    orderExpiration(orderNumber: $orderNumber)\n  }\n`;","import React from 'react';\nimport {useLazyQuery} from '@apollo/client';\n\nimport '../styles/elements.css';\nimport {SimpleVaccine, Vaccine} from './vaccine';\nimport {Error, Loading} from './status';\nimport {VACCINE} from '../controllers/graphql/queries/q_vaccine';\n\nconst Vaccination = ({\n  vaccinationId,\n  gender,\n  sourceBottle,\n  vaccinationDate\n}) => {\n  const [loadVaccineOrder, {called, data, error, loading}] = useLazyQuery(VACCINE, {\n    variables: {\n      by: 'id',\n      id: sourceBottle\n    }\n  });\n  const vaccinated = new Date(vaccinationDate);\n  return <details className='data highlight' >\n    <summary className='element' >{gender} - {vaccinated.toLocaleDateString()}</summary>\n    <p className='element' >Vaccination ID: {vaccinationId}</p>\n    <p className='element' >Gender: {gender}</p>\n    <p className='element' >Vaccination date: {vaccinated.toLocaleString()}</p>\n    {!called && <button className='element' id={`order_${sourceBottle}`} onClick={() => loadVaccineOrder()}>Load vaccine order</button>}\n    {called && loading && <section style={{marginLeft: '2rem'}} ><Loading datatype='vaccine order' /></section>}\n    {called && error && <section style={{marginLeft: '2rem'}} ><Error datatype='vaccine order' /></section>}\n    {called && data && <Vaccine embedded={true} {...data.vaccine} />}\n  </details>;\n};\n\nexport default Vaccination;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport Vaccination from './vaccination';\n\nconst RenderVaccinations = (props) => {\n  const vaccinations = useSelector(state => state.vaccinations.data);\n  return <section id='vaccinations' >\n    {vaccinations\n      ? vaccinations.map(vaccination => <Vaccination {...vaccination} />)\n      : <p>Vaccinations</p>}\n  </section>;\n};\n\nexport default RenderVaccinations;","import { gql } from '@apollo/client';\n\nexport const VACCINATION_DETAILS = gql`\n  fragment VaccinationDetails on Vaccination {\n    vaccinationId\n    sourceBottle\n    gender\n    vaccinationDate\n  }\n`;","\nimport { gql } from '@apollo/client';\nimport {VACCINATION_DETAILS} from '../fragments/f_vaccination';\n\nexport const VACCINATIONS = gql`\n  query vaccinations($by: String, $date: String, $gender: String) {\n    vaccinations(by: $by, date: $date, gender: $gender) {\n      ...VaccinationDetails\n    }\n  }\n  ${VACCINATION_DETAILS}\n`;\n\nexport const VACCINATION = gql`\n  query vaccination($id: String!) {\n    vaccination(id: $id) {\n      ...VaccinationDetails\n    }\n  }\n  ${VACCINATION_DETAILS}\n`;\n\nexport const VACCINATION_COUNT = gql`\n  query vaccinationCount($by: String, $gender: String, $date: String) {\n    vaccinationCount(by: $by, gender: $gender, date: $date)\n  }\n`;","\nconst databuilder = (vaccinations, orders) => {\n  let vData = [];\n  vaccinations.forEach(vaccination => {\n    const order = orders.find(o => o.id === vaccination.sourceBottle);\n    vData.push({\n      vaccinationId: vaccination.vaccinationId,\n      gender: vaccination.gender,\n      vaccinationDate: new Date(vaccination.vaccinationDate).valueOf(),\n      vaccineOrderId: order.id,\n      orderNumber: order.orderNumber,\n      healthCareDistrict: order.healthCareDistrict,\n      responsiblePerson: order.responsiblePerson,\n      vaccine: order.vaccine,\n      injections: order.injections,\n      vaccineArrivalDate: new Date(order.arrived).valueOf()\n    });\n  });\n  return vData;\n};\n\nexport default databuilder;","import React, { useEffect } from 'react';\nimport Plot from 'react-plotly.js';\nimport { useSelector } from 'react-redux';\nimport { useQuery, useLazyQuery } from '@apollo/client';\nimport { InlineIcon } from '@iconify/react';\nimport arrowRight from '@iconify-icons/mdi-light/arrow-right';\n\nimport { VACCINATIONS, VACCINATION_COUNT } from '../controllers/graphql/queries/q_vaccination';\nimport { VACCINE_ORDER_COUNT } from '../controllers/graphql/queries/q_vaccine';\nimport { Error, Loading } from './status';\nimport databuilder from '../tools/databuilder';\n\nconst DataVisualisation = () => {\n  let compositeData;\n  let vaccineDim;\n  let genderDim;\n  let healthcareDistrictDim;\n  const vaccinationCount = useQuery(VACCINATION_COUNT);\n  const orderCount = useQuery(VACCINE_ORDER_COUNT);\n  const vaccinations = useSelector(state => state.vaccinations);\n  const orders = useSelector(state => state.orders);\n  \n  function checkOrderStatus() {\n    return orders.status === 'done' ? true : false;\n  }\n  function checkVaccinationStatus() {\n    return vaccinations.status === 'done' ? true : false;\n  }\n\n  if (checkOrderStatus() && checkVaccinationStatus()) {\n    compositeData = databuilder(vaccinations.data, orders.data);\n  }\n  if (checkVaccinationStatus() && checkOrderStatus() && compositeData) {\n    vaccineDim = {\n      label: 'Vaccine',\n      values: compositeData.map(d => d['vaccine'])\n    };\n    genderDim = {\n      label: 'Gender',\n      values: compositeData.map(d => d['gender'])\n    };\n    healthcareDistrictDim = {\n      label: 'Healthcare district',\n      values: compositeData.map(d => d['healthCareDistrict'])\n    };\n  }\n\n  const Female = () => {\n    const [loadVaccinationCountFemale, {called, data, error, loading}] = useLazyQuery(VACCINATION_COUNT, {\n      variables: {\n        by: 'gender',\n        gender: 'female'\n      }\n    });\n    let percentage;\n    if (checkOrderStatus() && checkVaccinationStatus() && compositeData && !called) {\n      loadVaccinationCountFemale();\n    }\n    if (called && !loading && !error && data) {\n      percentage = data.vaccinationCount / vaccinationCount.data.vaccinationCount * 100;\n    }\n    return <section>\n      <p>Female:</p>\n      {called\n        ? loading\n          ? <Loading datatype='vaccination count by gender' />\n          : error\n            ? <Error datatype='vaccination count by gender' />\n            : data && <p>~ {percentage.toFixed(2)}% {<InlineIcon icon={arrowRight} />} {data.vaccinationCount} individuals</p>\n        : <Loading datatype='vaccination count by gender' />\n      }\n    </section>;\n  };\n\n  const Male = () => {\n    const [loadVaccinationCountMale, {called, data, error, loading}] = useLazyQuery(VACCINATION_COUNT, {\n      variables: {\n        by: 'gender',\n        gender: 'male'\n      }\n    });\n    let percentage;\n    if (checkOrderStatus() && checkVaccinationStatus() && compositeData && !called) {\n      loadVaccinationCountMale();\n    }\n    if (called && !loading && !error && data) {\n      percentage = data.vaccinationCount / vaccinationCount.data.vaccinationCount * 100;\n    }\n    return <section>\n      <p>Male:</p>\n      {called\n        ? loading\n          ? <Loading datatype='vaccination count by gender' />\n          : error\n            ? <Error datatype='vaccination count by gender' />\n            : data && <p>~ {percentage.toFixed(2)}% {<InlineIcon icon={arrowRight} />} {data.vaccinationCount} individuals</p>\n        : <Loading datatype='vaccination count by gender' />\n      }\n    </section>;\n  };\n\n  const Nonbinary = () => {\n    const [loadVaccinationCountNonbinary, {called, data, error, loading}] = useLazyQuery(VACCINATION_COUNT, {\n      variables: {\n        by: 'gender',\n        gender: 'nonbinary'\n      }\n    });\n    let percentage;\n    if (checkOrderStatus() && checkVaccinationStatus() && compositeData && !called) {\n      loadVaccinationCountNonbinary();\n    }\n    if (called && !loading && !error && data) {\n      percentage = data.vaccinationCount / vaccinationCount.data.vaccinationCount * 100;\n    }\n    return <section>\n      <p>Nonbinary:</p>\n      {called\n        ? loading\n          ? <Loading datatype='vaccination count by gender' />\n          : error\n            ? <Error datatype='vaccination count by gender' />\n            : data && <p>~ {percentage.toFixed(2)}% {<InlineIcon icon={arrowRight} />} {data.vaccinationCount} individuals</p>\n        : <Loading datatype='vaccination count by gender' />\n      }\n    </section>;\n  };\n\n  const GenderRate = () => {\n    return <section>\n      <Female />\n      <Male />\n      <Nonbinary />\n    </section>;\n  };\n\n  const Antiqua = () => {\n    const [loadVaccineOrderCountAntiqua, {called, data, error, loading}] = useLazyQuery(VACCINE_ORDER_COUNT, {\n      variables: {\n        by: 'brand',\n        brand: 'Antiqua'\n      }\n    });\n    let percentage;\n    let injectionsPerOrder;\n    if (checkOrderStatus() && checkVaccinationStatus() && compositeData && !called) {\n      loadVaccineOrderCountAntiqua();\n    }\n    if (called && !loading && !error && data) {\n      percentage = data.vaccineOrderCount / orderCount.data.vaccineOrderCount * 100;\n      orders.data.find(order => injectionsPerOrder = order.vaccine === 'Antiqua' ? order.injections : 0);\n    }\n    return <section>\n      <p>Antiqua:</p>\n      {called\n        ? loading\n          ? <Loading datatype='order count by brand' />\n          : error\n            ? <Error datatype='order count by brand' />\n            : data && <React.Fragment>\n              <p>~ {percentage.toFixed(2)}% {<InlineIcon icon={arrowRight} />} {data.vaccineOrderCount} orders</p>\n              <p>{injectionsPerOrder} injections / order, {data.vaccineOrderCount * injectionsPerOrder} injections in total</p>\n            </React.Fragment>\n        : <Loading datatype='order count by brand' />\n      }\n    </section>;\n  };\n\n  const SolarBuddhica = () => {\n    const [loadVaccineOrderCountSolarBuddhica, {called, data, error, loading}] = useLazyQuery(VACCINE_ORDER_COUNT, {\n      variables: {\n        by: 'brand',\n        brand: 'SolarBuddhica'\n      }\n    });\n    let percentage;\n    let injectionsPerOrder;\n    if (checkOrderStatus() && checkVaccinationStatus() && compositeData && !called) {\n      loadVaccineOrderCountSolarBuddhica();\n    }\n    if (called && !loading && !error && data) {\n      percentage = data.vaccineOrderCount / orderCount.data.vaccineOrderCount * 100;\n      orders.data.find(order => injectionsPerOrder = order.vaccine === 'SolarBuddhica' ? order.injections : 0);\n    }\n    return <section>\n      <p>SolarBuddhica:</p>\n      {called\n        ? loading\n          ? <Loading datatype='order count by brand' />\n          : error\n            ? <Error datatype='order count by brand' />\n            : data && <React.Fragment>\n              <p>~ {percentage.toFixed(2)}% {<InlineIcon icon={arrowRight} />} {data.vaccineOrderCount} orders</p>\n              <p>{injectionsPerOrder} injections / order, {data.vaccineOrderCount * injectionsPerOrder} injections in total</p>\n            </React.Fragment>\n        : <Loading datatype='order count by brand' />\n      }\n    </section>;\n  };\n  \n  const Zerpfy = () => {\n    const [loadVaccineOrderCountZerpfy, {called, data, error, loading}] = useLazyQuery(VACCINE_ORDER_COUNT, {\n      variables: {\n        by: 'brand',\n        brand: 'Zerpfy'\n      }\n    });\n    let percentage;\n    let injectionsPerOrder;\n    if (checkOrderStatus() && checkVaccinationStatus() && compositeData && !called) {\n      loadVaccineOrderCountZerpfy();\n    }\n    if (called && !loading && !error && data) {\n      percentage = data.vaccineOrderCount / orderCount.data.vaccineOrderCount * 100;\n      orders.data.find(order => injectionsPerOrder = order.vaccine === 'Zerpfy' ? order.injections : 0);\n    }\n    return <section>\n      <p>Zerpfy:</p>\n      {called\n        ? loading\n          ? <Loading datatype='order count by brand' />\n          : error\n            ? <Error datatype='order count by brand' />\n            : data && <React.Fragment>\n              <p>~ {percentage.toFixed(2)}% {<InlineIcon icon={arrowRight} />} {data.vaccineOrderCount} orders</p>\n              <p>{injectionsPerOrder} injections / order, {data.vaccineOrderCount * injectionsPerOrder} injections in total</p>\n            </React.Fragment>\n        : <Loading datatype='order count by brand' />\n      }\n    </section>;\n  };\n  \n  const VaccineRate = () => {\n    return <section>\n      <Antiqua />\n      <SolarBuddhica />\n      <Zerpfy />\n    </section>;\n  };\n  const HealthcareDistrictRate = () => {};\n  const VaccineUsageRate = () => {};\n\n  const Rates = () => {\n    return <section>\n      <h3>Data in numbers:</h3>\n      <article style={{display: 'inline-flex'}}>\n      <GenderRate />\n      <VaccineRate />\n      </article>\n    </section>;\n  };\n\n  return <section id='dataVisualisation' >\n    {checkOrderStatus() && checkVaccinationStatus() && compositeData\n      && <Rates/>}\n    {checkOrderStatus() && checkVaccinationStatus() && compositeData\n      ? <article style={{outline: '1px solid rgba(220,30,50,0.5)', marginBottom: '4rem'}}>\n        <Plot\n          data={[\n            {\n              type: 'parcats',\n              dimensions: [\n                healthcareDistrictDim, genderDim, vaccineDim\n              ],\n              line: {\n                shape: 'hspline',\n                cmin: 0,\n                cmax: 1,\n                color: new Int8Array(vaccineDim.values),\n                autocolorscale: true\n              },\n              labelfont: {size: 14},\n              arrangement: 'freeform'\n            }]}\n          layout={ {width: window.innerWidth >= 1280 ? 1080 : 720, height: window.innerHeight >= 800 ? 720 : 480, title: 'Vaccinations'} }/>\n      </article>\n      : <Loading datatype='composite data'/>}\n  </section>\n};\n\nexport default DataVisualisation;","import React from 'react';\nimport { NavLink, Route, Switch } from 'react-router-dom';\nimport {useQuery} from '@apollo/client';\nimport { useSelector } from 'react-redux';\n\nimport Home from './home';\nimport RenderOrders from './r_orders';\nimport RenderVaccinations from './r_vaccinations';\nimport DataVisualisation from './d_visualise';\nimport {Error, Loading} from './status';\n\nimport '../styles/global.css';\nimport '../styles/elements.css';\n\nconst Navigator = (props) => {\n  const activeStyle = {color: 'rgb(61,61,61)', textDecoration: 'solid underline', textDecorationColor: 'rgb(220,30,50)'};\n  const inactiveStyle = {color: 'rgb(61,61,61)', textDecoration: 'none'};\n  const separator = <p style={{color: 'rgb(61,61,61'}}> | </p>;\n  return <React.Fragment>\n    <nav className='row navigator' >\n      <NavLink to='/' inactiveStyle={inactiveStyle} >Home</NavLink>\n      {separator}\n      <NavLink to='/data' activeStyle={activeStyle} inactiveStyle={inactiveStyle} >Data</NavLink>\n      {separator}\n      <NavLink to='/orders' activeStyle={activeStyle} inactiveStyle={inactiveStyle} >Orders</NavLink>\n      {separator}\n      <NavLink to='/vaccinations' activeStyle={activeStyle} inactiveStyle={inactiveStyle} >Vaccinations</NavLink>\n    </nav>\n  </React.Fragment>;\n};\n\nexport const Routing = () => {\n  const vaccinations = useSelector(state => state.vaccinations);\n  const orders = useSelector(state => state.orders);\n\n  return <section className='viewer'>\n    <Switch>\n      <Route exact path='/' children={<Home />} />\n      <Route path='/data' children={\n        orders.status === 'loading' || orders.status === 'error' || vaccinations.status === 'loading' || vaccinations.status === 'error'\n          ? <DataVisualisation/>\n          : <DataVisualisation/>\n      } />\n      <Route path='/orders' children={\n        orders.status === 'loading' || orders.status === 'error'\n          ? orders.status === 'loading' ? <Loading datatype='vaccine orders' /> : <Error datatype='vaccine orders' />\n          : <RenderOrders orders={orders.data} />\n      }/>\n      <Route path='/vaccinations' children={\n        vaccinations.status === 'loading' || vaccinations.status === 'error'\n          ? vaccinations.status === 'loading' ? <Loading datatype='vaccinations' /> : <Error datatype='vaccinations' />\n          : <RenderVaccinations vaccinations={vaccinations.data} />\n      }/>\n    </Switch>\n  </section>;\n};\n\nexport default Navigator;","function makeItDev(string) {\n  return `[${string}]`;\n}\n\nfunction isDev(string) {\n  return process.env.NODE_ENV !== 'production'\n    ? makeItDev(string)\n    : string;\n}\n\nexport default isDev;","\n/*\n  Author:       RedFoxFinn - Antti Aarnio\n  Project:      solita-academy-vaccine\n  File:         ./src/tools/idGen.js\n  Description:  Tool that generates id's for the components or elements using parent id\n*/\n\nconst idGen = (parentId, idFor, ...rest) => {\n  switch (idFor) {\n    case 'frontend': return `${parentId}.frontend`;\n    case 'header': return `${parentId}.header`;\n    case 'heading': return `${parentId}.heading`;\n    case 'footer': return `${parentId}.footer`;\n    case 'order': return `${parentId}.order.${rest[0]}`;\n    case 'vaccination': return `${parentId}.vaccination.${rest[0]}`;\n    case 'navigator': return `${parentId}.navigator`;\n    case 'navlink': return `${parentId}.navlink.${rest[0]}`;\n    default: return `${parentId}.default`;\n  }\n};\n\nexport default idGen;","/* eslint-disable import/no-anonymous-default-export */\nimport packageinfo from '../../package.json';\n\nimport vaccineSample from '../data/vaccinesample.json';\nimport vaccinationSample from '../data/vaccinationsample.json';\n\nfunction getAppid() {\n  return packageinfo.appid.toString();\n}\n\nfunction getAppname() {\n  return packageinfo.appname[0].toString();\n}\n\nfunction getAuthorinfo() {\n  return packageinfo.author;\n}\n\nfunction getRepoinfo() {\n  return packageinfo.repository;\n}\n\nfunction getVaccineSample() {\n  return vaccineSample;\n}\n\nfunction getVaccinationSample() {\n  return vaccinationSample;\n}\n\nexport default {\n  appid: getAppid,\n  appname: getAppname,\n  authorinfo: getAuthorinfo,\n  repoinfo: getRepoinfo,\n  vaccineSample: getVaccineSample,\n  vaccinationSample: getVaccinationSample\n};","import React from 'react';\n\nimport Navigator from './navigator';\n\nimport isDev from '../tools/devstring';\nimport idGen from '../tools/idGen';\nimport inforeader from '../tools/inforeader';\n\nimport '../styles/elements.css';\n\nconst Header = ({id}) => {\n  return <section id={id} data-testid={id} className='topelement' >\n    <Heading id={idGen(id, 'heading')} />\n    <Navigator id={idGen(id, 'navigator')} />\n  </section>;\n};\n\nconst Heading = ({id}) => {\n  return <section className='header' id={id} data-testid={id} >\n    <h2 >{isDev(inforeader.appname())}</h2>\n  </section>;\n};\n\nexport default Header;","import React from 'react';\n\nimport isDev from '../tools/devstring';\nimport inforeader from '../tools/inforeader';\n\nimport '../styles/elements.css';\n\nconst Footer = (props) => {\n  const repoinfo = inforeader.repoinfo();\n  const authorinfo = inforeader.authorinfo();\n\n  return <section className='row footer' id={props.id} data-testid={props.id} >\n    <a href={repoinfo.url} >{isDev(inforeader.appid())}</a>\n    <a href={authorinfo.url} title={authorinfo.name} >{authorinfo.alias}</a>\n  </section>;\n};\n\nexport default Footer;","import React, { useEffect } from 'react';\nimport { HashRouter as Router } from 'react-router-dom';\nimport {useQuery} from '@apollo/client';\nimport {useDispatch} from 'react-redux';\n\nimport { setVaccinations, setStatus } from '../controllers/state/s_vaccination';\nimport Header from './header';\nimport Footer from './footer';\nimport {Routing} from './navigator';\nimport idGen from '../tools/idGen';\nimport {VACCINATIONS} from '../controllers/graphql/queries/q_vaccination';\nimport {VACCINES} from '../controllers/graphql/queries/q_vaccine';\n\nimport '../styles/elements.css';\n\nconst Frontend = (props) => {\n  const vaccinations = useQuery(VACCINATIONS);\n  const orders = useQuery(VACCINES);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (vaccinations.loading) {\n      dispatch({type: 'vaccinations/setStatus', status: 'loading'});\n    }\n    if (vaccinations.error) {\n      dispatch({type: 'vaccinations/setStatus', status: 'error'});\n    }\n    if (vaccinations.data) {\n      dispatch({type: 'vaccinations/setStatus', status: 'done'});\n      dispatch({type: 'vaccinations/setVaccinations', vaccinations: vaccinations.data.vaccinations});\n    }\n  }, [vaccinations, dispatch])\n  useEffect(() => {\n    if (orders.loading) {\n      dispatch({type: 'orders/setStatus', status: 'loading'});\n    }\n    if (orders.error) {\n      dispatch({type: 'orders/setStatus', status: 'error'});\n    }\n    if (orders.data) {\n      dispatch({type: 'orders/setStatus', status: 'done'});\n      dispatch({type: 'orders/setOrders', orders: orders.data.vaccines});\n    }\n  }, [orders, dispatch])\n  return <article className='column' id={props.id} data-testid={props.id} >\n    <Router>\n      <Header id={idGen(props.id, 'header')} />\n      <Routing baseId={`${props.id}.route`} />\n      <Footer id={idGen(props.id, 'footer')} />\n    </Router>\n  </article>;\n};\n\nexport default Frontend;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport { ApolloProvider } from '@apollo/client';\nimport { Provider } from 'react-redux';\n\nimport client from './controllers/graphql/client';\nimport store from './controllers/state/store';\n\nimport Frontend from './components/frontend';\n\nimport inforeader from './tools/inforeader';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n      <ApolloProvider client={client} >\n        <Frontend id={inforeader.appid()} />\n      </ApolloProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}