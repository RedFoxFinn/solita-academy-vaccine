{"version":3,"sources":["reportWebVitals.js","controllers/graphql/client.js","controllers/state/s_vaccination.js","controllers/state/s_order.js","controllers/state/s_composite.js","controllers/state/store.js","components/home.jsx","components/vaccine.jsx","components/r_orders.jsx","components/status.jsx","controllers/graphql/fragments/f_vaccine.js","controllers/graphql/queries/q_vaccine.js","tools/idGen.js","components/vaccination.jsx","components/r_vaccinations.jsx","controllers/graphql/fragments/f_vaccination.js","controllers/graphql/queries/q_vaccination.js","components/d_gender.jsx","components/d_order.jsx","components/d_district.jsx","components/loading.jsx","components/d_visualise.jsx","components/navigator.jsx","tools/devstring.js","tools/inforeader.js","components/header.jsx","components/footer.jsx","tools/databuilder.js","components/frontend.jsx","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","vaccinationSlice","createSlice","name","initialState","data","status","reducers","setVaccinations","state","action","vaccinations","setStatus","actions","orderSlice","setOrders","orders","compositeSlice","setComposite","compositeData","configureStore","reducer","composite","Home","id","Vaccine","orderNumber","responsiblePerson","healthCareDistrict","vaccine","injections","arrived","embedded","arrivalDate","Date","expirationDate","valueOf","className","data-testid","style","marginTop","toLocaleString","RenderOrders","useState","sorting","sort","a","b","getSorted","map","key","Error","props","datatype","Loading","VACCINE_DETAILS","gql","VACCINES","VACCINE","VACCINE_ORDER_COUNT","idGen","parentId","idFor","Vaccination","vaccinationId","gender","sourceBottle","vaccinationDate","useLazyQuery","variables","by","loadVaccineOrder","called","error","loading","vaccinated","loadVaccineOrderButtonId","toLocaleDateString","onClick","marginLeft","RenderVaccinations","useSelector","length","vaccination","VACCINATION_DETAILS","VACCINATIONS","VACCINATION_COUNT","Gender","percentage","totalCount","toLowerCase","loadVaccinationCount","vaccinationCount","toFixed","icon","arrowRight","Order","injectionsPerOrder","vaccineBrand","brand","loadVaccineOrderCount","vaccineOrderCount","find","order","Fragment","District","districtData","district","genderPercentage","f","m","n","vaccinePercentage","sb","z","vaccines","Antiqua","SolarBuddhica","Zerpfy","genders","female","male","nonbinary","forEach","entry","Ripple","class","DataVisualisation","vaccineDim","genderDim","healthcareDistrictDim","useQuery","orderCount","checkOrderStatus","checkVaccinationStatus","checkCompositeDataStatus","label","values","d","GenderRate","VaccineRate","HealthcareDistrictRate","HYKS","KYS","OYS","TAYS","TYKS","push","Rates","textAlign","Visualisation","outline","marginBottom","type","dimensions","line","shape","cmin","cmax","color","Int8Array","autocolorscale","labelfont","size","arrangement","layout","width","window","innerWidth","height","innerHeight","title","Routing","routingId","exact","path","children","Navigator","activeStyle","textDecoration","textDecorationColor","inactiveStyle","separator","navlinkIds","home","to","isDev","string","appid","packageinfo","toString","appname","authorinfo","author","repoinfo","repository","vaccineSample","vaccinationSample","Heading","inforeader","Header","Footer","href","url","alias","databuilder","vData","o","vaccineOrderId","vaccineArrivalDate","Frontend","stateVaccinations","stateOrders","dispatch","useDispatch","useEffect","ReactDOM","render","StrictMode","store","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.a99092ec.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ApolloClient, InMemoryCache } from '@apollo/client';\n\nconst client = new ApolloClient({\n  uri: 'https://sda-vaccines.herokuapp.com/api',\n  cache: new InMemoryCache()\n});\n\nexport default client;","import { createSlice } from '@reduxjs/toolkit';\n\nexport const vaccinationSlice = createSlice({\n  name: 'vaccinations',\n  initialState: {\n    data: [],\n    status: 'waiting'\n  },\n  reducers: {\n    setVaccinations: (state, action) => {\n      state.data = action.vaccinations\n    },\n    setStatus: (state, action) => {\n      state.status = action.status\n    }\n  }\n});\n\nexport const { setVaccinations, setStatus } = vaccinationSlice.actions;\n\nexport default vaccinationSlice.reducer;","import { createSlice } from '@reduxjs/toolkit';\n\nexport const orderSlice = createSlice({\n  name: 'orders',\n  initialState: {\n    data: [],\n    status: 'waiting'\n  },\n  reducers: {\n    setOrders: (state, action) => {\n      state.data = action.orders\n    },\n    setStatus: (state, action) => {\n      state.status = action.status\n    }\n  }\n});\n\nexport const { setOrders, setStatus } = orderSlice.actions;\n\nexport default orderSlice.reducer;","import { createSlice } from '@reduxjs/toolkit';\n\nexport const compositeSlice = createSlice({\n  name: 'composite',\n  initialState: {\n    data: [],\n    status: 'waiting'\n  },\n  reducers: {\n    setComposite: (state, action) => {\n      state.data = action.compositeData\n    },\n    setStatus: (state, action) => {\n      state.status = action.status\n    }\n  }\n});\n\nexport const { setComposite, setStatus } = compositeSlice.actions;\n\nexport default compositeSlice.reducer;","import {configureStore} from '@reduxjs/toolkit';\n\nimport vaccinationSlice from './s_vaccination';\nimport orderSlice from './s_order';\nimport compositeSlice from './s_composite';\n\nexport default configureStore({\n  reducer: {\n    vaccinations: vaccinationSlice,\n    orders: orderSlice,\n    composite: compositeSlice\n  }\n});","import React from 'react';\n\nconst Home = ({id}) => {\n  return <section>\n    <p>Home</p>\n  </section>;\n};\n\nexport default Home;","import React from 'react';\n\nimport '../styles/elements.css';\n\nexport const Vaccine = ({\n  id,\n  orderNumber,\n  responsiblePerson,\n  healthCareDistrict,\n  vaccine,\n  injections,\n  arrived,\n  embedded = false\n}) => {\n  const arrivalDate = new Date(arrived);\n  const monthInMilliseconds = 30*24*60*60*1000;\n  const expirationDate = new Date(arrivalDate.valueOf()+monthInMilliseconds);\n  return <details className={embedded ? 'data' : 'data highlight'} id={id} data-testid={id} >\n    <summary className='element' >{orderNumber} - {vaccine}</summary>\n    <p className='element' style={{marginTop: '0.5rem'}} >Vaccine vial ID: {id}</p>\n    <p className='element' >Vaccine order number: {orderNumber}</p>\n    <p className='element' >Responsible person: {responsiblePerson}</p>\n    <p className='element' >Healthcare district: {healthCareDistrict}</p>\n    <p className='element' >Vaccine: {vaccine}</p>\n    <p className='element' >Injections / vial: {injections}</p>\n    <p className='element' >Date of arrival: {arrivalDate.toLocaleString()}</p>\n    <p className='element' >Date of expiration: {expirationDate.toLocaleString()}</p>\n  </details>;\n};\n\nexport default Vaccine;\n","import React, { useState } from 'react';\n\nimport {Vaccine} from './vaccine';\n\nconst RenderOrders = ({orders, id}) => {\n  const [sorting, setSorting] = useState('oNumAsc');\n  /*\n    const setSortingOrder = (order) => {\n      switch (order) {\n        case 'orderNumberAsc': setSorting('oNumAsc'); break;\n        case 'orderNumberDesc': setSorting('oNumDesc'); break;\n        default: setSorting('oNumAsc');\n      }\n    }\n  */\n  const getSorted = () => {\n    const data = orders;\n    switch (sorting) {\n      case 'oNumAsc': return data;\n      case 'oNumDesc': return data.sort((a,b) => a.orderNumber < b.orderNumber ? 1 : -1);\n      default: return data;\n    }\n  };\n  return <section id={id} data-testid={id} >\n    {orders\n      ? getSorted().map(vaccine => <Vaccine embedded={false} {...vaccine} key={`vaccinekey-${vaccine.id}`} />)\n      : <p>Orders . . .</p>}\n  </section>\n};\n\nexport default RenderOrders;","import React from 'react';\n\nexport const Error = (props) => {\n  const id = `error-${props.datatype}`;\n  return <section id={id} data-testid={id} >\n    <p>Error loading {props.datatype}</p>\n  </section>;\n};\n\nexport const Loading = (props) => {\n  const id = `loading-${props.datatype}`;\n  return <section id={id} data-testid={id} >\n    <p>Loading {props.datatype}</p>\n  </section>;\n};","import { gql } from '@apollo/client';\n\nexport const VACCINE_DETAILS = gql`\n  fragment VaccineDetails on Vaccine {\n    id\n    orderNumber\n    healthCareDistrict\n    responsiblePerson\n    vaccine\n    injections\n    arrived\n  }\n`;","import { gql } from '@apollo/client';\nimport {VACCINE_DETAILS} from '../fragments/f_vaccine';\n\nexport const VACCINES = gql`\n  query vaccines($by: String, $responsiblePerson: String, $healthCareDistrict: String, $vaccine: String) {\n    vaccines(by: $by, responsiblePerson: $responsiblePerson, healthCareDistrict: $healthCareDistrict, vaccine: $vaccine) {\n      ...VaccineDetails\n    }\n  }\n  ${VACCINE_DETAILS}\n`;\n\nexport const VACCINE = gql`\n  query vaccine($by: String!, $id: String, $orderNumber: Int) {\n    vaccine(by: $by, id: $id, orderNumber: $orderNumber) {\n      ...VaccineDetails\n    }\n  }\n  ${VACCINE_DETAILS}\n`;\n\nexport const VACCINE_ORDER_COUNT = gql`\n  query vaccineOrderCount($by: String, $brand: String, $healthCareDistrict: String, $responsiblePerson: String, $arrivalDate: String) {\n    vaccineOrderCount(by: $by, brand: $brand, healthCareDistrict: $healthCareDistrict, responsiblePerson: $responsiblePerson, arrivalDate: $arrivalDate)\n  }\n`;\n\nexport const VACCINE_INJECTION_COUNT = gql`\n  query vaccineInjectionCount($by: String, $brand: String, $healthCareDistrict: String, $responsiblePerson: String, $arrivalDate: String) {\n    vaccineInjectionCount(by: $by, brand: $brand, healthCareDistrict: $healthCareDistrict, responsiblePerson: $responsiblePerson, arrivalDate: $arrivalDate)\n  }\n`;\n\nexport const VACCINE_ORDER_EXPIRATION = gql`\n  query orderExpiration($orderNumber: Int!) {\n    orderExpiration(orderNumber: $orderNumber)\n  }\n`;","\n/*\n  Author:       RedFoxFinn - Antti Aarnio\n  Project:      solita-academy-vaccine\n  File:         ./src/tools/idGen.js\n  Description:  Tool that generates id's for the components or elements using parent id\n*/\n\nconst idGen = (parentId, idFor, ...rest) => {\n  switch (idFor) {\n    case 'header': return `${parentId}.header`;\n    case 'heading': return `${parentId}.heading`;\n    case 'footer': return `${parentId}.footer`;\n    case 'order': return `${parentId}.order.${rest[0]}`;\n    case 'vaccination': return `${parentId}.vaccination.${rest[0]}`;\n    case 'loadVaccine': return `${parentId}.loadVaccineOrder.${rest[0]}`\n    case 'routing': return `${parentId}.routing`;\n    case 'navigator': return `${parentId}.navigator`;\n    case 'navlink': return `${parentId}.navlink.${rest[0]}`;\n    case 'home': return `${parentId}.home`;\n    case 'data': return `${parentId}.datavis`;\n    case 'orders': return `${parentId}.orders`;\n    case 'vaccinations': return `${parentId}.vaccinations`;\n    default: return `${parentId}.default`;\n  }\n};\n\nexport default idGen;","import React from 'react';\nimport {useLazyQuery} from '@apollo/client';\n\nimport '../styles/elements.css';\nimport {Vaccine} from './vaccine';\nimport {Error, Loading} from './status';\nimport {VACCINE} from '../controllers/graphql/queries/q_vaccine';\nimport idGen from '../tools/idGen';\n\nconst Vaccination = ({\n  vaccinationId,\n  gender,\n  sourceBottle,\n  vaccinationDate\n}) => {\n  const [loadVaccineOrder, {called, data, error, loading}] = useLazyQuery(VACCINE, {\n    variables: {\n      by: 'id',\n      id: sourceBottle\n    }\n  });\n  const vaccinated = new Date(vaccinationDate);\n  const loadVaccineOrderButtonId = idGen(vaccinationId, 'loadVaccine', sourceBottle);\n  return <details className='data highlight' id={vaccinationId} data-testid={vaccinationId} >\n    <summary className='element' >{gender} - {vaccinated.toLocaleDateString()}</summary>\n    <p className='element' >Vaccination ID: {vaccinationId}</p>\n    <p className='element' >Gender: {gender}</p>\n    <p className='element' >Vaccination date: {vaccinated.toLocaleString()}</p>\n    {!called && <button className='element' id={loadVaccineOrderButtonId} data-testid={loadVaccineOrderButtonId} onClick={() => loadVaccineOrder()}>Load vaccine order</button>}\n    {called && loading && <section style={{marginLeft: '2rem'}} ><Loading datatype='vaccine order' /></section>}\n    {called && error && <section style={{marginLeft: '2rem'}} ><Error datatype='vaccine order' /></section>}\n    {called && data && <Vaccine embedded={true} {...data.vaccine} />}\n  </details>;\n};\n\nexport default Vaccination;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport Vaccination from './vaccination';\n\nconst RenderVaccinations = ({id}) => {\n  const {data, status} = useSelector(state => state.vaccinations);\n  return <section id={id} data-testid={id} >\n    {status === 'done' && data && data.length > 0\n      ? data.map(vaccination => <Vaccination {...vaccination} key={`vaccinationkey-${vaccination.vaccinationId}`} />)\n      : <p>Vaccinations . . .</p>}\n  </section>;\n};\n\nexport default RenderVaccinations;","import { gql } from '@apollo/client';\n\nexport const VACCINATION_DETAILS = gql`\n  fragment VaccinationDetails on Vaccination {\n    vaccinationId\n    sourceBottle\n    gender\n    vaccinationDate\n  }\n`;","\nimport { gql } from '@apollo/client';\nimport {VACCINATION_DETAILS} from '../fragments/f_vaccination';\n\nexport const VACCINATIONS = gql`\n  query vaccinations($by: String, $date: String, $gender: String) {\n    vaccinations(by: $by, date: $date, gender: $gender) {\n      ...VaccinationDetails\n    }\n  }\n  ${VACCINATION_DETAILS}\n`;\n\nexport const VACCINATION = gql`\n  query vaccination($id: String!) {\n    vaccination(id: $id) {\n      ...VaccinationDetails\n    }\n  }\n  ${VACCINATION_DETAILS}\n`;\n\nexport const VACCINATION_COUNT = gql`\n  query vaccinationCount($by: String, $gender: String, $date: String) {\n    vaccinationCount(by: $by, gender: $gender, date: $date)\n  }\n`;","import React from 'react';\nimport { useLazyQuery } from '@apollo/client';\nimport { InlineIcon } from '@iconify/react';\nimport arrowRight from '@iconify-icons/mdi-light/arrow-right';\n\nimport { VACCINATION_COUNT } from '../controllers/graphql/queries/q_vaccination';\nimport { Error, Loading } from './status';\n\nconst Gender = ({gender, totalCount}) => {\n  const [loadVaccinationCount, {called, data, error, loading}] = useLazyQuery(VACCINATION_COUNT, {\n    variables: {\n      by: 'gender',\n      gender: gender.toLowerCase()\n    }\n  });\n  let percentage;\n    if (!called) {\n      loadVaccinationCount();\n    }\n    if (called && !loading && !error && data) {\n      percentage = data.vaccinationCount / totalCount * 100;\n    }\n    return <section className='small-subset'>\n      <p>{gender}:</p>\n      {called\n        ? loading\n          ? <Loading datatype='vaccination count by gender' />\n          : error\n            ? <Error datatype='vaccination count by gender' />\n            : data && <p>~ {percentage.toFixed(2)}% {<InlineIcon icon={arrowRight} />} {data.vaccinationCount} vaccinated</p>\n        : <Loading datatype='vaccination count by gender' />\n      }\n    </section>;\n};\n\nexport default Gender;","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useLazyQuery } from '@apollo/client';\nimport { InlineIcon } from '@iconify/react';\nimport arrowRight from '@iconify-icons/mdi-light/arrow-right';\n\nimport { VACCINE_ORDER_COUNT } from '../controllers/graphql/queries/q_vaccine';\nimport { Error, Loading } from './status';\n\nconst Order = ({vaccineBrand, totalCount}) => {\n  const orders = useSelector(state => state.orders);\n  const [loadVaccineOrderCount, {called, data, error, loading}] = useLazyQuery(VACCINE_ORDER_COUNT, {\n    variables: {\n      by: 'brand',\n      brand: vaccineBrand\n    }\n  });\n  let percentage;\n  let injectionsPerOrder;\n  if (!called) {\n    loadVaccineOrderCount();\n  }\n  if (called && !loading && !error && data) {\n    percentage = data.vaccineOrderCount / totalCount * 100;\n    orders.data.find(order => injectionsPerOrder = order.vaccine === vaccineBrand ? order.injections : 0);\n  }\n  return <section className='subset'>\n    <p>{vaccineBrand}:</p>\n    {called\n      ? loading\n        ? <Loading datatype='order count by brand' />\n        : error\n          ? <Error datatype='order count by brand' />\n          : data && <React.Fragment>\n            <p>~ {percentage.toFixed(2)}% {<InlineIcon icon={arrowRight} />} {data.vaccineOrderCount} orders</p>\n            <p>{injectionsPerOrder} injections / order, {data.vaccineOrderCount * injectionsPerOrder} injections in total</p>\n          </React.Fragment>\n      : <Loading datatype='order count by brand' />\n    }\n  </section>;\n};\n\nexport default Order;","import React from 'react';\nimport { InlineIcon } from '@iconify/react';\nimport arrowRight from '@iconify-icons/mdi-light/arrow-right';\n\nconst District = ({districtData, district, totalCount}) => {\n  const percentage = districtData.length / totalCount * 100;\n  const genderPercentage = {\n    f: 0,\n    m: 0,\n    n: 0\n  };\n  const vaccinePercentage = {\n    a: 0,\n    sb: 0,\n    z: 0\n  };\n  const vaccines = {\n    Antiqua: 0,\n    SolarBuddhica: 0,\n    Zerpfy: 0\n  };\n  const genders = {\n    female: 0,\n    male: 0,\n    nonbinary: 0\n  };\n  districtData.forEach(entry => {\n    switch (entry.gender) {\n      case 'female': genders.female += 1; break;\n      case 'male': genders.male += 1; break;\n      case 'nonbinary': genders.nonbinary += 1; break;\n      default: break;\n    }\n    switch (entry.vaccine) {\n      case 'Antiqua': vaccines.Antiqua += 1; break;\n      case 'SolarBuddhica': vaccines.SolarBuddhica += 1; break;\n      case 'Zerpfy': vaccines.Zerpfy += 1; break;\n      default: break;\n    }\n  });\n  genderPercentage.f = genders.female / districtData.length * 100;\n  genderPercentage.m = genders.male / districtData.length * 100;\n  genderPercentage.n = genders.nonbinary / districtData.length * 100;\n  vaccinePercentage.a = vaccines.Antiqua / districtData.length * 100;\n  vaccinePercentage.sb = vaccines.SolarBuddhica / districtData.length * 100;\n  vaccinePercentage.z = vaccines.Zerpfy / districtData.length * 100;\n  return <section className='district'>\n    <p>{district}:</p>\n    <p>~ {percentage.toFixed(2)}% {<InlineIcon icon={arrowRight} />} {districtData.length} vaccinations</p>\n    <p>Female: ~ {genderPercentage.f.toFixed(2)}% {<InlineIcon icon={arrowRight} />} {genders.female} vaccinations</p>\n    <p>Male: ~ {genderPercentage.m.toFixed(2)}% {<InlineIcon icon={arrowRight} />} {genders.male} vaccinations</p>\n    <p>Nonbinary: ~ {genderPercentage.n.toFixed(2)}% {<InlineIcon icon={arrowRight} />} {genders.nonbinary} vaccinations</p>\n    <p>Antiqua: ~ {vaccinePercentage.a.toFixed(2)}% {<InlineIcon icon={arrowRight} />} {vaccines.Antiqua} vaccinations</p>\n    <p>SolarBuddhica: ~ {vaccinePercentage.sb.toFixed(2)}% {<InlineIcon icon={arrowRight} />} {vaccines.SolarBuddhica} vaccinations</p>\n    <p>Zerpfy: ~ {vaccinePercentage.z.toFixed(2)}% {<InlineIcon icon={arrowRight} />} {vaccines.Zerpfy} vaccinations</p>\n  </section>\n};\n\nexport default District;","import '../styles/loading.css';\n\nexport const Ripple = () => <div class=\"lds-ripple\"><div></div><div></div></div>;","import React, { useEffect } from 'react';\nimport Plot from 'react-plotly.js';\nimport { useSelector } from 'react-redux';\nimport { useQuery } from '@apollo/client';\n\nimport { VACCINATION_COUNT } from '../controllers/graphql/queries/q_vaccination';\nimport { VACCINE_ORDER_COUNT } from '../controllers/graphql/queries/q_vaccine';\nimport Gender from './d_gender';\nimport Order from './d_order';\nimport District from './d_district';\nimport '../styles/elements.css';\nimport {Ripple} from './loading';\n\nconst DataVisualisation = () => {\n  let vaccineDim;\n  let genderDim;\n  let healthcareDistrictDim;\n  const vaccinationCount = useQuery(VACCINATION_COUNT);\n  const orderCount = useQuery(VACCINE_ORDER_COUNT);\n  const vaccinations = useSelector(state => state.vaccinations);\n  const orders = useSelector(state => state.orders);\n  const composite = useSelector(state => state.composite);\n  \n  function checkOrderStatus() {\n    return orderCount && orderCount.called && orderCount.data\n      && orders.status === 'done' ? true : false;\n  }\n  function checkVaccinationStatus() {\n    return vaccinationCount && vaccinationCount.called && vaccinationCount.data\n      && vaccinations.status === 'done' ? true : false;\n  }\n  function checkCompositeDataStatus() {\n    return checkOrderStatus() && checkVaccinationStatus()\n      && composite.status === 'done' ? true : false;\n  }\n\n  if (checkCompositeDataStatus()) {\n    vaccineDim = {\n      label: 'Vaccine',\n      values: composite.data.map(d => d['vaccine'])\n    };\n    genderDim = {\n      label: 'Gender',\n      values: composite.data.map(d => d['gender'])\n    };\n    healthcareDistrictDim = {\n      label: 'Healthcare district',\n      values: composite.data.map(d => d['healthCareDistrict'])\n    };\n  }\n\n  const GenderRate = () => {\n    return <details className='set'>\n      <summary>by gender</summary>\n      <article className='set-container'>\n        <Gender gender='Female' totalCount={vaccinationCount.data.vaccinationCount} />\n        <Gender gender='Male' totalCount={vaccinationCount.data.vaccinationCount} />\n        <Gender gender='Nonbinary' totalCount={vaccinationCount.data.vaccinationCount} />\n      </article>\n    </details>;\n  };\n  \n  const VaccineRate = () => {\n    return <details className='set'>\n      <summary>by vaccine</summary>\n      <article className='set-container'>\n        <Order vaccineBrand='Antiqua' totalCount={orderCount.data.vaccineOrderCount} />\n        <Order vaccineBrand='SolarBuddhica' totalCount={orderCount.data.vaccineOrderCount} />\n        <Order vaccineBrand='Zerpfy' totalCount={orderCount.data.vaccineOrderCount} />\n      </article>\n    </details>;\n  };\n  const HealthcareDistrictRate = () => {\n    const districtData = {\n      HYKS: [],\n      KYS: [],\n      OYS: [],\n      TAYS: [],\n      TYKS: []\n    };\n    composite.data.forEach(composite => {\n      switch (composite.healthCareDistrict) {\n        case 'HYKS': districtData.HYKS.push(composite); break;\n        case 'KYS': districtData.KYS.push(composite); break;\n        case 'OYS': districtData.OYS.push(composite); break;\n        case 'TAYS': districtData.TAYS.push(composite); break;\n        case 'TYKS': districtData.TYKS.push(composite); break;\n        default: break;\n      }\n    });\n    return <details className='set'>\n      <summary>by healthcare district</summary>\n      <article className='set-container'>\n        <District district='HYKS' districtData={districtData.HYKS} totalCount={composite.data.length} />\n        <District district='KYS' districtData={districtData.KYS} totalCount={composite.data.length} />\n        <District district='OYS' districtData={districtData.OYS} totalCount={composite.data.length} />\n        <District district='TAYS' districtData={districtData.TAYS} totalCount={composite.data.length} />\n        <District district='TYKS' districtData={districtData.TYKS} totalCount={composite.data.length} />\n      </article>\n    </details>;\n  };\n  const VaccineUsageRate = () => {};\n\n  const Rates = () => {\n    return <section className='dataVis'>\n      <h3 style={{textAlign: 'center'}}>Data in numbers</h3>\n      {checkVaccinationStatus() ? <GenderRate /> : <Ripple/>}\n      {checkOrderStatus() ? <VaccineRate /> : <Ripple/>}\n      {checkCompositeDataStatus() ? <HealthcareDistrictRate /> : <Ripple/>}\n    </section>;\n  };\n\n  const Visualisation = () => {\n    return <section id='dataVisualisation' className='dataVis'>\n      <h3 style={{textAlign: 'center'}}>Data visualised</h3>\n      {checkCompositeDataStatus()\n        ? <article style={{outline: '1px solid rgba(220,30,50,0.5)', marginBottom: '4rem'}}>\n          <Plot\n            data={[\n              {\n                type: 'parcats',\n                dimensions: [\n                  healthcareDistrictDim, genderDim, vaccineDim\n                ],\n                line: {\n                  shape: 'hspline',\n                  cmin: 0,\n                  cmax: 1,\n                  color: new Int8Array(vaccineDim.values),\n                  autocolorscale: true\n                },\n                labelfont: {size: 14},\n                arrangement: 'freeform'\n              }]}\n            layout={ {width: window.innerWidth >= 1280 ? 1080 : 720, height: window.innerHeight >= 800 ? 720 : 480, title: 'Vaccinations'} }/>\n        </article>\n        : <Ripple/>}\n    </section>\n  };\n\n  return <section id='dataVisualisation' >\n    <React.Fragment>\n      <Rates/>\n      <Visualisation />\n    </React.Fragment>\n  </section>\n};\n\nexport default DataVisualisation;","import React from 'react';\nimport { NavLink, Route, Switch } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\n\nimport Home from './home';\nimport RenderOrders from './r_orders';\nimport RenderVaccinations from './r_vaccinations';\nimport DataVisualisation from './d_visualise';\nimport {Error, Loading} from './status';\nimport idGen from '../tools/idGen';\nimport {Ripple} from './loading';\n\nimport '../styles/global.css';\nimport '../styles/elements.css';\n\nconst Navigator = ({id}) => {\n  const activeStyle = {color: 'rgb(61,61,61)', textDecoration: 'solid underline', textDecorationColor: 'rgb(220,30,50)'};\n  const inactiveStyle = {color: 'rgb(61,61,61)', textDecoration: 'none'};\n  const separator = <p style={{color: 'rgb(61,61,61'}}> | </p>;\n  const navlinkIds = {\n    home: idGen(id, 'navlink', 'home'),\n    data: idGen(id, 'navlink', 'data'),\n    orders: idGen(id, 'navlink', 'orders'),\n    vaccinations: idGen(id, 'navlink', 'vaccinations')\n  };\n  return <nav className='row navigator' >\n    <NavLink\n      to='/'\n      inactiveStyle={inactiveStyle}\n      id={navlinkIds.home}\n      data-testid={navlinkIds.home}>Home</NavLink>\n    {separator}\n    <NavLink\n      to='/data'\n      activeStyle={activeStyle}\n      inactiveStyle={inactiveStyle}\n      id={navlinkIds.data}\n      data-testid={navlinkIds.data}>Data</NavLink>\n    {separator}\n    <NavLink\n      to='/orders'\n      activeStyle={activeStyle}\n      inactiveStyle={inactiveStyle}\n      id={navlinkIds.orders}\n      data-testid={navlinkIds.orders}>Orders</NavLink>\n    {separator}\n    <NavLink\n      to='/vaccinations'\n      activeStyle={activeStyle}\n      inactiveStyle={inactiveStyle}\n      id={navlinkIds.vaccinations}\n      data-testid={navlinkIds.vaccinations}>Vaccinations</NavLink>\n  </nav>;\n};\n\nexport const Routing = (props) => {\n  const vaccinations = useSelector(state => state.vaccinations);\n  const orders = useSelector(state => state.orders);\n  const composite = useSelector(state => state.composite);\n  const routingId = idGen(props.id, 'routing')\n\n  function checkOrderStatus() {\n    return orders.status === 'done' ? true : false;\n  }\n  function checkVaccinationStatus() {\n    return vaccinations.status === 'done' ? true : false;\n  }\n  function checkCompositeDataStatus() {\n    return checkOrderStatus() && checkVaccinationStatus()\n      && composite.status === 'done' ? true : false;\n  }\n\n  return <section className='viewer' id={routingId} data-testid={routingId}>\n    <Switch>\n      <Route exact path='/' children={<Home id={idGen(props.id, 'home')} />} />\n      <Route path='/data' children={\n        checkCompositeDataStatus()\n          ? <DataVisualisation id={idGen(props.id, 'data')} />\n          : <Ripple/>\n      } />\n      <Route path='/orders' children={\n        orders.status === 'loading' || orders.status === 'error'\n          ? orders.status === 'loading' ? <Ripple/> : <Error datatype='vaccine orders' />\n          : <RenderOrders orders={orders.data} id={idGen(props.id, 'orders')} />\n      }/>\n      <Route path='/vaccinations' children={\n        vaccinations.status === 'loading' || vaccinations.status === 'error'\n          ? vaccinations.status === 'loading' ? <Ripple/> : <Error datatype='vaccinations' />\n          : <RenderVaccinations vaccinations={vaccinations.data} id={idGen(props.id, 'vaccinations')} />\n      }/>\n    </Switch>\n  </section>;\n};\n\nexport default Navigator;","export function makeItDev(string) {\n  return `[${string}]`;\n}\n\nfunction isDev(string) {\n  return process.env.NODE_ENV !== 'production'\n    ? makeItDev(string)\n    : string;\n}\n\nexport default isDev;","/* eslint-disable import/no-anonymous-default-export */\nimport packageinfo from '../../package.json';\n\nimport vaccineSample from '../data/vaccinesample.json';\nimport vaccinationSample from '../data/vaccinationsample.json';\n\nfunction getAppid() {\n  return packageinfo.appid.toString();\n}\n\nfunction getAppname() {\n  return packageinfo.appname[0].toString();\n}\n\nfunction getAuthorinfo() {\n  return packageinfo.author;\n}\n\nfunction getRepoinfo() {\n  return packageinfo.repository;\n}\n\nfunction getVaccineSample() {\n  return vaccineSample;\n}\n\nfunction getVaccinationSample() {\n  return vaccinationSample;\n}\n\nexport default {\n  appid: getAppid,\n  appname: getAppname,\n  authorinfo: getAuthorinfo,\n  repoinfo: getRepoinfo,\n  vaccineSample: getVaccineSample,\n  vaccinationSample: getVaccinationSample\n};","import React from 'react';\n\nimport Navigator from './navigator';\n\nimport isDev from '../tools/devstring';\nimport idGen from '../tools/idGen';\nimport inforeader from '../tools/inforeader';\n\nimport '../styles/elements.css';\n\nconst Header = ({id}) => {\n  return <section id={id} data-testid={id} className='topelement' >\n    <Heading id={idGen(id, 'heading')} />\n    <Navigator id={idGen(id, 'navigator')} />\n  </section>;\n};\n\nconst Heading = ({id}) => {\n  return <section className='header' id={id} data-testid={id} >\n    <h2 >{isDev(inforeader.appname())}</h2>\n  </section>;\n};\n\nexport default Header;","import React from 'react';\n\nimport isDev from '../tools/devstring';\nimport inforeader from '../tools/inforeader';\n\nimport '../styles/elements.css';\n\nconst Footer = (props) => {\n  const repoinfo = inforeader.repoinfo();\n  const authorinfo = inforeader.authorinfo();\n\n  return <section className='row footer' id={props.id} data-testid={props.id} >\n    <a href={repoinfo.url} >{isDev(inforeader.appid())}</a>\n    <a href={authorinfo.url} title={authorinfo.name} >{authorinfo.alias}</a>\n  </section>;\n};\n\nexport default Footer;","\nconst databuilder = (vaccinations, orders) => {\n  let vData = [];\n  vaccinations.forEach(vaccination => {\n    const order = orders.find(o => o.id === vaccination.sourceBottle);\n    vData.push({\n      vaccinationId: vaccination.vaccinationId,\n      gender: vaccination.gender,\n      vaccinationDate: new Date(vaccination.vaccinationDate).valueOf(),\n      vaccineOrderId: order.id,\n      orderNumber: order.orderNumber,\n      healthCareDistrict: order.healthCareDistrict,\n      responsiblePerson: order.responsiblePerson,\n      vaccine: order.vaccine,\n      injections: order.injections,\n      vaccineArrivalDate: new Date(order.arrived).valueOf()\n    });\n  });\n  return vData;\n};\n\nexport default databuilder;","import React, { useEffect } from 'react';\nimport { HashRouter as Router } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport Header from './header';\nimport Footer from './footer';\nimport {Routing} from './navigator';\nimport idGen from '../tools/idGen';\nimport {VACCINATIONS} from '../controllers/graphql/queries/q_vaccination';\nimport {VACCINES} from '../controllers/graphql/queries/q_vaccine';\nimport databuilder from '../tools/databuilder';\n\nimport '../styles/elements.css';\n\nconst Frontend = (props) => {\n  const stateVaccinations = useSelector(state => state.vaccinations);\n  const stateOrders = useSelector(state => state.orders);\n  const vaccinations = useQuery(VACCINATIONS);\n  const orders = useQuery(VACCINES);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (vaccinations.loading) {\n      dispatch({type: 'vaccinations/setStatus', status: 'loading'});\n    }\n    if (vaccinations.error) {\n      dispatch({type: 'vaccinations/setStatus', status: 'error'});\n    }\n    if (vaccinations.data) {\n      dispatch({type: 'vaccinations/setStatus', status: 'done'});\n      dispatch({type: 'vaccinations/setVaccinations', vaccinations: vaccinations.data.vaccinations});\n    }\n  }, [vaccinations, dispatch]);\n  useEffect(() => {\n    if (orders.loading) {\n      dispatch({type: 'orders/setStatus', status: 'loading'});\n    }\n    if (orders.error) {\n      dispatch({type: 'orders/setStatus', status: 'error'});\n    }\n    if (orders.data) {\n      dispatch({type: 'orders/setStatus', status: 'done'});\n      dispatch({type: 'orders/setOrders', orders: orders.data.vaccines});\n    }\n  }, [orders, dispatch]);\n\n  useEffect(() => {\n    if (stateOrders.status === 'done' && stateVaccinations.status === 'done' && orders.data && vaccinations.data) {\n      dispatch({type: 'composite/setStatus', status: 'loading'});\n      const compositeData = databuilder(stateVaccinations.data, stateOrders.data);\n      dispatch({type: 'composite/setComposite', compositeData: compositeData});\n      dispatch({type: 'composite/setStatus', status: 'done'});\n    }\n  }, [dispatch, stateOrders, stateVaccinations, orders, vaccinations]);\n\n  return <article className='column' id={props.id} data-testid={props.id} >\n    <Router>\n      <Header id={idGen(props.id, 'header')} />\n      <Routing id={props.id} />\n      <Footer id={idGen(props.id, 'footer')} />\n    </Router>\n  </article>;\n};\n\nexport default Frontend;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport { ApolloProvider } from '@apollo/client';\nimport { Provider } from 'react-redux';\n\nimport client from './controllers/graphql/client';\nimport store from './controllers/state/store';\n\nimport Frontend from './components/frontend';\n\nimport inforeader from './tools/inforeader';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n      <ApolloProvider client={client} >\n        <Frontend id={inforeader.appid()} />\n      </ApolloProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}