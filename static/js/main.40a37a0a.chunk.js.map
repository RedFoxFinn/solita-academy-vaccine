{"version":3,"sources":["reportWebVitals.js","controllers/graphql/client.js","controllers/state/s_vaccination.js","controllers/state/s_order.js","controllers/state/s_composite.js","controllers/state/store.js","tools/devstring.js","tools/inforeader.js","components/header.jsx","components/footer.jsx","components/home.jsx","components/vaccine.jsx","components/r_orders.jsx","components/status.jsx","controllers/graphql/fragments/f_vaccine.js","controllers/graphql/queries/q_vaccine.js","tools/idGen.js","components/vaccination.jsx","components/r_vaccinations.jsx","controllers/graphql/fragments/f_vaccination.js","controllers/graphql/queries/q_vaccination.js","components/d_gender.jsx","components/d_order.jsx","components/d_district.jsx","components/loading.jsx","components/d_visualise.jsx","components/navigator.jsx","tools/databuilder.js","components/frontend.jsx","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","vaccinationSlice","createSlice","name","initialState","data","status","reducers","setVaccinations","state","action","vaccinations","setStatus","actions","orderSlice","setOrders","orders","compositeSlice","setComposite","compositeData","configureStore","reducer","composite","isDev","string","appid","packageinfo","toString","appname","authorinfo","author","home","repoinfo","repository","vaccineSample","vaccinationSample","Header","id","className","data-testid","inforeader","Footer","props","href","url","title","alias","Home","texts","intro","disclaimer","style","display","assignment","by","purpose","Vaccine","orderNumber","responsiblePerson","healthCareDistrict","vaccine","injections","arrived","embedded","arrivalDate","Date","expirationDate","valueOf","marginTop","toLocaleString","RenderOrders","useState","sorting","sort","a","b","getSorted","map","key","Error","datatype","Loading","VACCINE_DETAILS","gql","VACCINES","VACCINE","VACCINE_ORDER_COUNT","idGen","parentId","idFor","Vaccination","vaccinationId","gender","sourceBottle","vaccinationDate","useLazyQuery","variables","loadVaccineOrder","called","error","loading","vaccinated","loadVaccineOrderButtonId","toLocaleDateString","onClick","marginLeft","RenderVaccinations","useSelector","length","vaccination","VACCINATION_DETAILS","VACCINATIONS","VACCINATION_COUNT","Gender","percentage","totalCount","toLowerCase","loadVaccinationCount","vaccinationCount","toFixed","icon","arrowRight","Order","injectionsPerOrder","vaccineBrand","brand","loadVaccineOrderCount","vaccineOrderCount","find","order","Fragment","District","districtData","district","genderPercentage","f","m","n","vaccinePercentage","sb","z","vaccines","Antiqua","SolarBuddhica","Zerpfy","genders","female","male","nonbinary","forEach","entry","Ripple","class","DataVisualisation","vaccineDim","genderDim","healthcareDistrictDim","useQuery","orderCount","checkOrderStatus","checkVaccinationStatus","checkCompositeDataStatus","label","values","d","GenderRate","VaccineRate","HealthcareDistrictRate","HYKS","KYS","OYS","TAYS","TYKS","push","Rates","textAlign","Visualisation","outline","marginBottom","type","dimensions","line","shape","cmin","cmax","color","Int8Array","autocolorscale","labelfont","size","arrangement","layout","width","window","innerWidth","height","innerHeight","Routing","routingId","exact","path","children","Navigator","activeStyle","textDecoration","textDecorationColor","inactiveStyle","separator","navlinkIds","to","databuilder","vData","o","vaccineOrderId","vaccineArrivalDate","Frontend","stateVaccinations","stateOrders","dispatch","useDispatch","useEffect","ReactDOM","render","StrictMode","store","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.40a37a0a.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ApolloClient, InMemoryCache } from '@apollo/client';\n\nconst client = new ApolloClient({\n  uri: 'https://sda-vaccines.herokuapp.com/api',\n  cache: new InMemoryCache()\n});\n\nexport default client;","import { createSlice } from '@reduxjs/toolkit';\n\nexport const vaccinationSlice = createSlice({\n  name: 'vaccinations',\n  initialState: {\n    data: [],\n    status: 'waiting'\n  },\n  reducers: {\n    setVaccinations: (state, action) => {\n      state.data = action.vaccinations\n    },\n    setStatus: (state, action) => {\n      state.status = action.status\n    }\n  }\n});\n\nexport const { setVaccinations, setStatus } = vaccinationSlice.actions;\n\nexport default vaccinationSlice.reducer;","import { createSlice } from '@reduxjs/toolkit';\n\nexport const orderSlice = createSlice({\n  name: 'orders',\n  initialState: {\n    data: [],\n    status: 'waiting'\n  },\n  reducers: {\n    setOrders: (state, action) => {\n      state.data = action.orders\n    },\n    setStatus: (state, action) => {\n      state.status = action.status\n    }\n  }\n});\n\nexport const { setOrders, setStatus } = orderSlice.actions;\n\nexport default orderSlice.reducer;","import { createSlice } from '@reduxjs/toolkit';\n\nexport const compositeSlice = createSlice({\n  name: 'composite',\n  initialState: {\n    data: [],\n    status: 'waiting'\n  },\n  reducers: {\n    setComposite: (state, action) => {\n      state.data = action.compositeData\n    },\n    setStatus: (state, action) => {\n      state.status = action.status\n    }\n  }\n});\n\nexport const { setComposite, setStatus } = compositeSlice.actions;\n\nexport default compositeSlice.reducer;","import {configureStore} from '@reduxjs/toolkit';\n\nimport vaccinationSlice from './s_vaccination';\nimport orderSlice from './s_order';\nimport compositeSlice from './s_composite';\n\nexport default configureStore({\n  reducer: {\n    vaccinations: vaccinationSlice,\n    orders: orderSlice,\n    composite: compositeSlice\n  }\n});","export function makeItDev(string) {\n  return `[${string}]`;\n}\n\nfunction isDev(string) {\n  return process.env.NODE_ENV !== 'production'\n    ? makeItDev(string)\n    : string;\n}\n\nexport default isDev;","/* eslint-disable import/no-anonymous-default-export */\nimport packageinfo from '../../package.json';\nimport home from '../data/home.json';\n\nimport vaccineSample from '../data/vaccinesample.json';\nimport vaccinationSample from '../data/vaccinationsample.json';\n\nfunction getAppid() {\n  return packageinfo.appid.toString();\n}\n\nfunction getAppname() {\n  return packageinfo.appname[0].toString();\n}\n\nfunction getAuthorinfo() {\n  return packageinfo.author;\n}\n\nfunction getRepoinfo() {\n  return packageinfo.repository;\n}\n\nfunction getVaccineSample() {\n  return vaccineSample;\n}\n\nfunction getVaccinationSample() {\n  return vaccinationSample;\n}\n\nfunction getHome() {\n  return home;\n}\n\nexport default {\n  appid: getAppid,\n  appname: getAppname,\n  authorinfo: getAuthorinfo,\n  home: getHome,\n  repoinfo: getRepoinfo,\n  vaccineSample: getVaccineSample,\n  vaccinationSample: getVaccinationSample\n};","import React from 'react';\n\nimport isDev from '../tools/devstring';\nimport inforeader from '../tools/inforeader';\n\nimport '../styles/elements.css';\n\nconst Header = ({id}) => {\n  return <section className='header' id={id} data-testid={id} >\n    <h2 >{isDev(inforeader.appname())}</h2>\n  </section>;\n};\n\nexport default Header;","import React from 'react';\n\nimport isDev from '../tools/devstring';\nimport inforeader from '../tools/inforeader';\n\nimport '../styles/elements.css';\n\nconst Footer = (props) => {\n  const repoinfo = inforeader.repoinfo();\n  const authorinfo = inforeader.authorinfo();\n\n  return <section className='row footer' id={props.id} data-testid={props.id} >\n    <a href={repoinfo.url} >{isDev(inforeader.appid())}</a>\n    <a href={authorinfo.url} title={authorinfo.name} >{authorinfo.alias}</a>\n  </section>;\n};\n\nexport default Footer;","import React from 'react';\n\nimport inforeader from '../tools/inforeader';\n\nconst Home = ({id}) => {\n  const texts = inforeader.home();\n  return <section id={id} data-testid={id}>\n    <section>\n      <p>{texts ? texts.intro : 'intro'}</p>\n    </section>\n    <section>\n      <p>{texts ? texts.disclaimer : 'disclaimer'}</p>\n    </section>\n    <section style={{display: 'inline-flex'}}>\n      <p>Assignment given by:</p>\n      {texts\n        ? <a href={texts.assignment.by.url}>{texts.assignment.by.author}</a>\n        : <p>author</p>}\n    </section>\n    <section>\n      <p>{texts ? texts.assignment.purpose : 'assignment purpose'}</p>\n    </section>\n  </section>;\n};\n\nexport default Home;","import React from 'react';\n\nimport '../styles/elements.css';\n\nexport const Vaccine = ({\n  id,\n  orderNumber,\n  responsiblePerson,\n  healthCareDistrict,\n  vaccine,\n  injections,\n  arrived,\n  embedded = false\n}) => {\n  const arrivalDate = new Date(arrived);\n  const monthInMilliseconds = 30*24*60*60*1000;\n  const expirationDate = new Date(arrivalDate.valueOf()+monthInMilliseconds);\n  return <details className={embedded ? 'data' : 'data highlight'} id={id} data-testid={id} >\n    <summary className='element' >{orderNumber} - {vaccine}</summary>\n    <p className='element' style={{marginTop: '0.5rem'}} >Vaccine vial ID: {id}</p>\n    <p className='element' >Vaccine order number: {orderNumber}</p>\n    <p className='element' >Responsible person: {responsiblePerson}</p>\n    <p className='element' >Healthcare district: {healthCareDistrict}</p>\n    <p className='element' >Vaccine: {vaccine}</p>\n    <p className='element' >Injections / vial: {injections}</p>\n    <p className='element' >Date of arrival: {arrivalDate.toLocaleString()}</p>\n    <p className='element' >Date of expiration: {expirationDate.toLocaleString()}</p>\n  </details>;\n};\n\nexport default Vaccine;\n","import React, { useState } from 'react';\n\nimport {Vaccine} from './vaccine';\n\nconst RenderOrders = ({orders, id}) => {\n  const [sorting, setSorting] = useState('oNumAsc');\n  /*\n    const setSortingOrder = (order) => {\n      switch (order) {\n        case 'orderNumberAsc': setSorting('oNumAsc'); break;\n        case 'orderNumberDesc': setSorting('oNumDesc'); break;\n        default: setSorting('oNumAsc');\n      }\n    }\n  */\n  const getSorted = () => {\n    const data = orders;\n    switch (sorting) {\n      case 'oNumAsc': return data;\n      case 'oNumDesc': return data.sort((a,b) => a.orderNumber < b.orderNumber ? 1 : -1);\n      default: return data;\n    }\n  };\n  return <section id={id} data-testid={id} >\n    {orders\n      ? getSorted().map(vaccine => <Vaccine embedded={false} {...vaccine} key={`vaccinekey-${vaccine.id}`} />)\n      : <p>Orders . . .</p>}\n  </section>\n};\n\nexport default RenderOrders;","import React from 'react';\n\nexport const Error = (props) => {\n  const id = `error-${props.datatype}`;\n  return <section id={id} data-testid={id} >\n    <p>Error loading {props.datatype}</p>\n  </section>;\n};\n\nexport const Loading = (props) => {\n  const id = `loading-${props.datatype}`;\n  return <section id={id} data-testid={id} >\n    <p>Loading {props.datatype}</p>\n  </section>;\n};","import { gql } from '@apollo/client';\n\nexport const VACCINE_DETAILS = gql`\n  fragment VaccineDetails on Vaccine {\n    id\n    orderNumber\n    healthCareDistrict\n    responsiblePerson\n    vaccine\n    injections\n    arrived\n  }\n`;","import { gql } from '@apollo/client';\nimport {VACCINE_DETAILS} from '../fragments/f_vaccine';\n\nexport const VACCINES = gql`\n  query vaccines($by: String, $responsiblePerson: String, $healthCareDistrict: String, $vaccine: String) {\n    vaccines(by: $by, responsiblePerson: $responsiblePerson, healthCareDistrict: $healthCareDistrict, vaccine: $vaccine) {\n      ...VaccineDetails\n    }\n  }\n  ${VACCINE_DETAILS}\n`;\n\nexport const VACCINE = gql`\n  query vaccine($by: String!, $id: String, $orderNumber: Int) {\n    vaccine(by: $by, id: $id, orderNumber: $orderNumber) {\n      ...VaccineDetails\n    }\n  }\n  ${VACCINE_DETAILS}\n`;\n\nexport const VACCINE_ORDER_COUNT = gql`\n  query vaccineOrderCount($by: String, $brand: String, $healthCareDistrict: String, $responsiblePerson: String, $arrivalDate: String) {\n    vaccineOrderCount(by: $by, brand: $brand, healthCareDistrict: $healthCareDistrict, responsiblePerson: $responsiblePerson, arrivalDate: $arrivalDate)\n  }\n`;\n\nexport const VACCINE_INJECTION_COUNT = gql`\n  query vaccineInjectionCount($by: String, $brand: String, $healthCareDistrict: String, $responsiblePerson: String, $arrivalDate: String) {\n    vaccineInjectionCount(by: $by, brand: $brand, healthCareDistrict: $healthCareDistrict, responsiblePerson: $responsiblePerson, arrivalDate: $arrivalDate)\n  }\n`;\n\nexport const VACCINE_ORDER_EXPIRATION = gql`\n  query orderExpiration($orderNumber: Int!) {\n    orderExpiration(orderNumber: $orderNumber)\n  }\n`;","\n/*\n  Author:       RedFoxFinn - Antti Aarnio\n  Project:      solita-academy-vaccine\n  File:         ./src/tools/idGen.js\n  Description:  Tool that generates id's for the components or elements using parent id\n*/\n\nconst idGen = (parentId, idFor, ...rest) => {\n  switch (idFor) {\n    case 'header': return `${parentId}.header`;\n    case 'heading': return `${parentId}.heading`;\n    case 'footer': return `${parentId}.footer`;\n    case 'order': return `${parentId}.order.${rest[0]}`;\n    case 'vaccination': return `${parentId}.vaccination.${rest[0]}`;\n    case 'loadVaccine': return `${parentId}.loadVaccineOrder.${rest[0]}`\n    case 'routing': return `${parentId}.routing`;\n    case 'navigator': return `${parentId}.navigator`;\n    case 'navlink': return `${parentId}.navlink.${rest[0]}`;\n    case 'home': return `${parentId}.home`;\n    case 'data': return `${parentId}.datavis`;\n    case 'orders': return `${parentId}.orders`;\n    case 'vaccinations': return `${parentId}.vaccinations`;\n    default: return `${parentId}.default`;\n  }\n};\n\nexport default idGen;","import React from 'react';\nimport {useLazyQuery} from '@apollo/client';\n\nimport '../styles/elements.css';\nimport {Vaccine} from './vaccine';\nimport {Error, Loading} from './status';\nimport {VACCINE} from '../controllers/graphql/queries/q_vaccine';\nimport idGen from '../tools/idGen';\n\nconst Vaccination = ({\n  vaccinationId,\n  gender,\n  sourceBottle,\n  vaccinationDate\n}) => {\n  const [loadVaccineOrder, {called, data, error, loading}] = useLazyQuery(VACCINE, {\n    variables: {\n      by: 'id',\n      id: sourceBottle\n    }\n  });\n  const vaccinated = new Date(vaccinationDate);\n  const loadVaccineOrderButtonId = idGen(vaccinationId, 'loadVaccine', sourceBottle);\n  return <details className='data highlight' id={vaccinationId} data-testid={vaccinationId} >\n    <summary className='element' >{gender} - {vaccinated.toLocaleDateString()}</summary>\n    <p className='element' >Vaccination ID: {vaccinationId}</p>\n    <p className='element' >Gender: {gender}</p>\n    <p className='element' >Vaccination date: {vaccinated.toLocaleString()}</p>\n    {!called && <button className='element' id={loadVaccineOrderButtonId} data-testid={loadVaccineOrderButtonId} onClick={() => loadVaccineOrder()}>Load vaccine order</button>}\n    {called && loading && <section style={{marginLeft: '2rem'}} ><Loading datatype='vaccine order' /></section>}\n    {called && error && <section style={{marginLeft: '2rem'}} ><Error datatype='vaccine order' /></section>}\n    {called && data && <Vaccine embedded={true} {...data.vaccine} />}\n  </details>;\n};\n\nexport default Vaccination;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport Vaccination from './vaccination';\n\nconst RenderVaccinations = ({id}) => {\n  const {data, status} = useSelector(state => state.vaccinations);\n  return <section id={id} data-testid={id} >\n    {status === 'done' && data && data.length > 0\n      ? data.map(vaccination => <Vaccination {...vaccination} key={`vaccinationkey-${vaccination.vaccinationId}`} />)\n      : <p>Vaccinations . . .</p>}\n  </section>;\n};\n\nexport default RenderVaccinations;","import { gql } from '@apollo/client';\n\nexport const VACCINATION_DETAILS = gql`\n  fragment VaccinationDetails on Vaccination {\n    vaccinationId\n    sourceBottle\n    gender\n    vaccinationDate\n  }\n`;","\nimport { gql } from '@apollo/client';\nimport {VACCINATION_DETAILS} from '../fragments/f_vaccination';\n\nexport const VACCINATIONS = gql`\n  query vaccinations($by: String, $date: String, $gender: String) {\n    vaccinations(by: $by, date: $date, gender: $gender) {\n      ...VaccinationDetails\n    }\n  }\n  ${VACCINATION_DETAILS}\n`;\n\nexport const VACCINATION = gql`\n  query vaccination($id: String!) {\n    vaccination(id: $id) {\n      ...VaccinationDetails\n    }\n  }\n  ${VACCINATION_DETAILS}\n`;\n\nexport const VACCINATION_COUNT = gql`\n  query vaccinationCount($by: String, $gender: String, $date: String) {\n    vaccinationCount(by: $by, gender: $gender, date: $date)\n  }\n`;","import React from 'react';\nimport { useLazyQuery } from '@apollo/client';\nimport { InlineIcon } from '@iconify/react';\nimport arrowRight from '@iconify-icons/mdi-light/arrow-right';\n\nimport { VACCINATION_COUNT } from '../controllers/graphql/queries/q_vaccination';\nimport { Error, Loading } from './status';\n\nconst Gender = ({gender, totalCount}) => {\n  const [loadVaccinationCount, {called, data, error, loading}] = useLazyQuery(VACCINATION_COUNT, {\n    variables: {\n      by: 'gender',\n      gender: gender.toLowerCase()\n    }\n  });\n  let percentage;\n    if (!called) {\n      loadVaccinationCount();\n    }\n    if (called && !loading && !error && data) {\n      percentage = data.vaccinationCount / totalCount * 100;\n    }\n    return <section className='small-subset'>\n      <p>{gender}:</p>\n      {called\n        ? loading\n          ? <Loading datatype='vaccination count by gender' />\n          : error\n            ? <Error datatype='vaccination count by gender' />\n            : data && <p>~ {percentage.toFixed(2)}% {<InlineIcon icon={arrowRight} />} {data.vaccinationCount} vaccinated</p>\n        : <Loading datatype='vaccination count by gender' />\n      }\n    </section>;\n};\n\nexport default Gender;","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useLazyQuery } from '@apollo/client';\nimport { InlineIcon } from '@iconify/react';\nimport arrowRight from '@iconify-icons/mdi-light/arrow-right';\n\nimport { VACCINE_ORDER_COUNT } from '../controllers/graphql/queries/q_vaccine';\nimport { Error, Loading } from './status';\n\nconst Order = ({vaccineBrand, totalCount}) => {\n  const orders = useSelector(state => state.orders);\n  const [loadVaccineOrderCount, {called, data, error, loading}] = useLazyQuery(VACCINE_ORDER_COUNT, {\n    variables: {\n      by: 'brand',\n      brand: vaccineBrand\n    }\n  });\n  let percentage;\n  let injectionsPerOrder;\n  if (!called) {\n    loadVaccineOrderCount();\n  }\n  if (called && !loading && !error && data) {\n    percentage = data.vaccineOrderCount / totalCount * 100;\n    orders.data.find(order => injectionsPerOrder = order.vaccine === vaccineBrand ? order.injections : 0);\n  }\n  return <section className='subset'>\n    <p>{vaccineBrand}:</p>\n    {called\n      ? loading\n        ? <Loading datatype='order count by brand' />\n        : error\n          ? <Error datatype='order count by brand' />\n          : data && <React.Fragment>\n            <p>~ {percentage.toFixed(2)}% {<InlineIcon icon={arrowRight} />} {data.vaccineOrderCount} orders</p>\n            <p>{injectionsPerOrder} injections / order, {data.vaccineOrderCount * injectionsPerOrder} injections in total</p>\n          </React.Fragment>\n      : <Loading datatype='order count by brand' />\n    }\n  </section>;\n};\n\nexport default Order;","import React from 'react';\n\nconst District = ({districtData, district, totalCount}) => {\n  const percentage = districtData.length / totalCount * 100;\n  const genderPercentage = {\n    f: 0,\n    m: 0,\n    n: 0\n  };\n  const vaccinePercentage = {\n    a: 0,\n    sb: 0,\n    z: 0\n  };\n  const vaccines = {\n    Antiqua: 0,\n    SolarBuddhica: 0,\n    Zerpfy: 0\n  };\n  const genders = {\n    female: 0,\n    male: 0,\n    nonbinary: 0\n  };\n  districtData.forEach(entry => {\n    switch (entry.gender) {\n      case 'female': genders.female += 1; break;\n      case 'male': genders.male += 1; break;\n      case 'nonbinary': genders.nonbinary += 1; break;\n      default: break;\n    }\n    switch (entry.vaccine) {\n      case 'Antiqua': vaccines.Antiqua += 1; break;\n      case 'SolarBuddhica': vaccines.SolarBuddhica += 1; break;\n      case 'Zerpfy': vaccines.Zerpfy += 1; break;\n      default: break;\n    }\n  });\n  genderPercentage.f = genders.female / districtData.length * 100;\n  genderPercentage.m = genders.male / districtData.length * 100;\n  genderPercentage.n = genders.nonbinary / districtData.length * 100;\n  vaccinePercentage.a = vaccines.Antiqua / districtData.length * 100;\n  vaccinePercentage.sb = vaccines.SolarBuddhica / districtData.length * 100;\n  vaccinePercentage.z = vaccines.Zerpfy / districtData.length * 100;\n  return <section className='district' id={district} data-testid={district}>\n    <p>{district}:</p>\n    <p>~ {percentage.toFixed(2)}%, {districtData.length} vaccinations</p>\n    <p>Female: ~ {genderPercentage.f.toFixed(2)}%, {genders.female} vaccinations</p>\n    <p>Male: ~ {genderPercentage.m.toFixed(2)}%, {genders.male} vaccinations</p>\n    <p>Nonbinary: ~ {genderPercentage.n.toFixed(2)}%, {genders.nonbinary} vaccinations</p>\n    <p>Antiqua: ~ {vaccinePercentage.a.toFixed(2)}%, {vaccines.Antiqua} vaccinations</p>\n    <p>SolarBuddhica: ~ {vaccinePercentage.sb.toFixed(2)}%, {vaccines.SolarBuddhica} vaccinations</p>\n    <p>Zerpfy: ~ {vaccinePercentage.z.toFixed(2)}%, {vaccines.Zerpfy} vaccinations</p>\n  </section>\n};\n\nexport default District;","import '../styles/loading.css';\n\nexport const Ripple = () => <div class=\"lds-ripple\"><div></div><div></div></div>;","import React, { useEffect } from 'react';\nimport Plot from 'react-plotly.js';\nimport { useSelector } from 'react-redux';\nimport { useQuery } from '@apollo/client';\n\nimport { VACCINATION_COUNT } from '../controllers/graphql/queries/q_vaccination';\nimport { VACCINE_ORDER_COUNT } from '../controllers/graphql/queries/q_vaccine';\nimport Gender from './d_gender';\nimport Order from './d_order';\nimport District from './d_district';\nimport '../styles/elements.css';\nimport {Ripple} from './loading';\n\nconst DataVisualisation = () => {\n  let vaccineDim;\n  let genderDim;\n  let healthcareDistrictDim;\n  const vaccinationCount = useQuery(VACCINATION_COUNT);\n  const orderCount = useQuery(VACCINE_ORDER_COUNT);\n  const vaccinations = useSelector(state => state.vaccinations);\n  const orders = useSelector(state => state.orders);\n  const composite = useSelector(state => state.composite);\n  \n  function checkOrderStatus() {\n    return orderCount && orderCount.called && orderCount.data\n      && orders.status === 'done' ? true : false;\n  }\n  function checkVaccinationStatus() {\n    return vaccinationCount && vaccinationCount.called && vaccinationCount.data\n      && vaccinations.status === 'done' ? true : false;\n  }\n  function checkCompositeDataStatus() {\n    return checkOrderStatus() && checkVaccinationStatus()\n      && composite.status === 'done' ? true : false;\n  }\n\n  if (checkCompositeDataStatus()) {\n    vaccineDim = {\n      label: 'Vaccine',\n      values: composite.data.map(d => d['vaccine'])\n    };\n    genderDim = {\n      label: 'Gender',\n      values: composite.data.map(d => d['gender'])\n    };\n    healthcareDistrictDim = {\n      label: 'Healthcare district',\n      values: composite.data.map(d => d['healthCareDistrict'])\n    };\n  }\n\n  const GenderRate = () => {\n    return <details className='set'>\n      <summary>by gender</summary>\n      <article className='set-container'>\n        <Gender gender='Female' totalCount={vaccinationCount.data.vaccinationCount} />\n        <Gender gender='Male' totalCount={vaccinationCount.data.vaccinationCount} />\n        <Gender gender='Nonbinary' totalCount={vaccinationCount.data.vaccinationCount} />\n      </article>\n    </details>;\n  };\n  \n  const VaccineRate = () => {\n    return <details className='set'>\n      <summary>by vaccine</summary>\n      <article className='set-container'>\n        <Order vaccineBrand='Antiqua' totalCount={orderCount.data.vaccineOrderCount} />\n        <Order vaccineBrand='SolarBuddhica' totalCount={orderCount.data.vaccineOrderCount} />\n        <Order vaccineBrand='Zerpfy' totalCount={orderCount.data.vaccineOrderCount} />\n      </article>\n    </details>;\n  };\n  const HealthcareDistrictRate = () => {\n    const districtData = {\n      HYKS: [],\n      KYS: [],\n      OYS: [],\n      TAYS: [],\n      TYKS: []\n    };\n    composite.data.forEach(composite => {\n      switch (composite.healthCareDistrict) {\n        case 'HYKS': districtData.HYKS.push(composite); break;\n        case 'KYS': districtData.KYS.push(composite); break;\n        case 'OYS': districtData.OYS.push(composite); break;\n        case 'TAYS': districtData.TAYS.push(composite); break;\n        case 'TYKS': districtData.TYKS.push(composite); break;\n        default: break;\n      }\n    });\n    return <details className='set'>\n      <summary>by healthcare district</summary>\n      <article className='set-container'>\n        <District district='HYKS' districtData={districtData.HYKS} totalCount={composite.data.length} />\n        <District district='KYS' districtData={districtData.KYS} totalCount={composite.data.length} />\n        <District district='OYS' districtData={districtData.OYS} totalCount={composite.data.length} />\n        <District district='TAYS' districtData={districtData.TAYS} totalCount={composite.data.length} />\n        <District district='TYKS' districtData={districtData.TYKS} totalCount={composite.data.length} />\n      </article>\n    </details>;\n  };\n  const VaccineUsageRate = () => {};\n\n  const Rates = () => {\n    return <section className='dataVis'>\n      <h3 style={{textAlign: 'center'}}>Data in numbers</h3>\n      {checkVaccinationStatus() ? <GenderRate /> : <Ripple/>}\n      {checkOrderStatus() ? <VaccineRate /> : <Ripple/>}\n      {checkCompositeDataStatus() ? <HealthcareDistrictRate /> : <Ripple/>}\n    </section>;\n  };\n\n  const Visualisation = () => {\n    return <section id='dataVisualisation' className='dataVis'>\n      <h3 style={{textAlign: 'center'}}>Data visualised</h3>\n      {checkCompositeDataStatus()\n        ? <article style={{outline: '1px solid rgba(220,30,50,0.5)', marginBottom: '4rem'}}>\n          <Plot\n            data={[\n              {\n                type: 'parcats',\n                dimensions: [\n                  healthcareDistrictDim, genderDim, vaccineDim\n                ],\n                line: {\n                  shape: 'hspline',\n                  cmin: 0,\n                  cmax: 1,\n                  color: new Int8Array(vaccineDim.values),\n                  autocolorscale: true\n                },\n                labelfont: {size: 14},\n                arrangement: 'freeform'\n              }]}\n            layout={ {width: window.innerWidth >= 1280 ? 1080 : 720, height: window.innerHeight >= 800 ? 720 : 480, title: 'Vaccinations'} }/>\n        </article>\n        : <Ripple/>}\n    </section>\n  };\n\n  return <section id='dataVisualisation' >\n    <React.Fragment>\n      <Rates/>\n      <Visualisation />\n    </React.Fragment>\n  </section>\n};\n\nexport default DataVisualisation;","import React from 'react';\nimport { NavLink, Route, Switch } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\n\nimport Home from './home';\nimport RenderOrders from './r_orders';\nimport RenderVaccinations from './r_vaccinations';\nimport DataVisualisation from './d_visualise';\nimport {Error, Loading} from './status';\nimport idGen from '../tools/idGen';\nimport {Ripple} from './loading';\n\nimport '../styles/global.css';\nimport '../styles/elements.css';\n\nconst Navigator = ({id}) => {\n  const activeStyle = {color: 'rgb(61,61,61)', textDecoration: 'solid underline', textDecorationColor: 'rgb(220,30,50)'};\n  const inactiveStyle = {color: 'rgb(61,61,61)', textDecoration: 'none'};\n  const separator = <p style={{color: 'rgb(61,61,61'}}> | </p>;\n  const navlinkIds = {\n    home: idGen(id, 'navlink', 'home'),\n    data: idGen(id, 'navlink', 'data'),\n    orders: idGen(id, 'navlink', 'orders'),\n    vaccinations: idGen(id, 'navlink', 'vaccinations')\n  };\n  return <nav className='row navigator' >\n    <NavLink\n      to='/'\n      inactiveStyle={inactiveStyle}\n      id={navlinkIds.home}\n      data-testid={navlinkIds.home}>Home</NavLink>\n    {separator}\n    <NavLink\n      to='/data'\n      activeStyle={activeStyle}\n      inactiveStyle={inactiveStyle}\n      id={navlinkIds.data}\n      data-testid={navlinkIds.data}>Data</NavLink>\n    {separator}\n    <NavLink\n      to='/orders'\n      activeStyle={activeStyle}\n      inactiveStyle={inactiveStyle}\n      id={navlinkIds.orders}\n      data-testid={navlinkIds.orders}>Orders</NavLink>\n    {separator}\n    <NavLink\n      to='/vaccinations'\n      activeStyle={activeStyle}\n      inactiveStyle={inactiveStyle}\n      id={navlinkIds.vaccinations}\n      data-testid={navlinkIds.vaccinations}>Vaccinations</NavLink>\n  </nav>;\n};\n\nexport const Routing = (props) => {\n  const vaccinations = useSelector(state => state.vaccinations);\n  const orders = useSelector(state => state.orders);\n  const composite = useSelector(state => state.composite);\n  const routingId = idGen(props.id, 'routing')\n\n  function checkOrderStatus() {\n    return orders.status === 'done' ? true : false;\n  }\n  function checkVaccinationStatus() {\n    return vaccinations.status === 'done' ? true : false;\n  }\n  function checkCompositeDataStatus() {\n    return checkOrderStatus() && checkVaccinationStatus()\n      && composite.status === 'done' ? true : false;\n  }\n\n  return <section className='viewer' id={routingId} data-testid={routingId}>\n    <Switch>\n      <Route exact path='/' children={<Home id={idGen(props.id, 'home')} />} />\n      <Route path='/data' children={\n        checkCompositeDataStatus()\n          ? <DataVisualisation id={idGen(props.id, 'data')} />\n          : <Ripple/>\n      } />\n      <Route path='/orders' children={\n        orders.status === 'loading' || orders.status === 'error'\n          ? orders.status === 'loading' ? <Ripple/> : <Error datatype='vaccine orders' />\n          : <RenderOrders orders={orders.data} id={idGen(props.id, 'orders')} />\n      }/>\n      <Route path='/vaccinations' children={\n        vaccinations.status === 'loading' || vaccinations.status === 'error'\n          ? vaccinations.status === 'loading' ? <Ripple/> : <Error datatype='vaccinations' />\n          : <RenderVaccinations vaccinations={vaccinations.data} id={idGen(props.id, 'vaccinations')} />\n      }/>\n    </Switch>\n  </section>;\n};\n\nexport default Navigator;","\nconst databuilder = (vaccinations, orders) => {\n  let vData = [];\n  vaccinations.forEach(vaccination => {\n    const order = orders.find(o => o.id === vaccination.sourceBottle);\n    vData.push({\n      vaccinationId: vaccination.vaccinationId,\n      gender: vaccination.gender,\n      vaccinationDate: new Date(vaccination.vaccinationDate).valueOf(),\n      vaccineOrderId: order.id,\n      orderNumber: order.orderNumber,\n      healthCareDistrict: order.healthCareDistrict,\n      responsiblePerson: order.responsiblePerson,\n      vaccine: order.vaccine,\n      injections: order.injections,\n      vaccineArrivalDate: new Date(order.arrived).valueOf()\n    });\n  });\n  return vData;\n};\n\nexport default databuilder;","import React, { useEffect } from 'react';\nimport { HashRouter as Router } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport Header from './header';\nimport Footer from './footer';\nimport {Routing} from './navigator';\nimport idGen from '../tools/idGen';\nimport {VACCINATIONS} from '../controllers/graphql/queries/q_vaccination';\nimport {VACCINES} from '../controllers/graphql/queries/q_vaccine';\nimport databuilder from '../tools/databuilder';\nimport Navigator from './navigator';\n\nimport '../styles/elements.css';\n\nconst Frontend = (props) => {\n  const stateVaccinations = useSelector(state => state.vaccinations);\n  const stateOrders = useSelector(state => state.orders);\n  const vaccinations = useQuery(VACCINATIONS);\n  const orders = useQuery(VACCINES);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (vaccinations.loading) {\n      dispatch({type: 'vaccinations/setStatus', status: 'loading'});\n    }\n    if (vaccinations.error) {\n      dispatch({type: 'vaccinations/setStatus', status: 'error'});\n    }\n    if (vaccinations.data) {\n      dispatch({type: 'vaccinations/setStatus', status: 'done'});\n      dispatch({type: 'vaccinations/setVaccinations', vaccinations: vaccinations.data.vaccinations});\n    }\n  }, [vaccinations, dispatch]);\n  useEffect(() => {\n    if (orders.loading) {\n      dispatch({type: 'orders/setStatus', status: 'loading'});\n    }\n    if (orders.error) {\n      dispatch({type: 'orders/setStatus', status: 'error'});\n    }\n    if (orders.data) {\n      dispatch({type: 'orders/setStatus', status: 'done'});\n      dispatch({type: 'orders/setOrders', orders: orders.data.vaccines});\n    }\n  }, [orders, dispatch]);\n\n  useEffect(() => {\n    if (stateOrders.status === 'done' && stateVaccinations.status === 'done' && orders.data && vaccinations.data) {\n      dispatch({type: 'composite/setStatus', status: 'loading'});\n      const compositeData = databuilder(stateVaccinations.data, stateOrders.data);\n      dispatch({type: 'composite/setComposite', compositeData: compositeData});\n      dispatch({type: 'composite/setStatus', status: 'done'});\n    }\n  }, [dispatch, stateOrders, stateVaccinations, orders, vaccinations]);\n\n  return <article className='column' id={props.id} data-testid={props.id} >\n    <Router>\n      <section id={idGen(props.id, 'header')} className='topelement'>\n        <Header id={idGen(props.id, 'heading')} />\n        <Navigator id={idGen(props.id, 'navigator')} />\n      </section>\n      <Routing id={props.id} />\n      <Footer id={idGen(props.id, 'footer')} />\n    </Router>\n  </article>;\n};\n\nexport default Frontend;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport { ApolloProvider } from '@apollo/client';\nimport { Provider } from 'react-redux';\n\nimport client from './controllers/graphql/client';\nimport store from './controllers/state/store';\n\nimport Frontend from './components/frontend';\n\nimport inforeader from './tools/inforeader';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n      <ApolloProvider client={client} >\n        <Frontend id={inforeader.appid()} />\n      </ApolloProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}